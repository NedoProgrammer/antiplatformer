<?xml version="1.0"?>
<doc>
    <assembly>
        <name>tgui.net</name>
    </assembly>
    <members>
        <member name="T:TGUI.Container">
            <summary>
            Container widget. Parent class for widgets that contain child widgets.
            </summary>
        </member>
        <member name="M:TGUI.Container.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
        </member>
        <member name="M:TGUI.Container.#ctor(TGUI.Container)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:TGUI.Container.Destroy(System.Boolean)">
            <summary>
            Destroy the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call?</param>
        </member>
        <member name="M:TGUI.Container.Add(TGUI.Widget,System.String)">
            <summary>
            Adds a widget to the container
            </summary>
            <param name="widget">The widget you would like to add</param>
            <param name="widgetName">You can give the widget a unique name to retrieve it from the container later</param>
            <remarks>
            The widget name should not contain whitespace
            </remarks>
        </member>
        <member name="M:TGUI.Container.Get(System.String)">
            <summary>
            Returns a widget that was added earlier
            </summary>
            <param name="widgetName">The name that was given to the widget when it was added to the container</param>
            <returns>
            The earlier added widget
            </returns>
            <remarks>
            The container will first search for widgets that are direct children of it, but when none of the child widgets match
            the given name, a recursive search will be performed.
            The function returns null when an unknown widget name was passed.
            </remarks>
        </member>
        <member name="P:TGUI.Container.Widgets">
            <summary>
            Gets a list of all the widgets in this container or completely replace all widgets with a new list
            </summary>
            <remarks>
            Setting this property is equivalent to calling RemoveAllWidgets() and then call Add(widget) for every widget in the list.
            </remarks>
        </member>
        <member name="M:TGUI.Container.GetWidgets">
            <summary>
            Returns a list of all the widgets in this container
            </summary>
            <returns>
            List of widgets that have been added to the container
            </returns>
        </member>
        <member name="P:TGUI.Container.WidgetNames">
            <summary>
            Gets the list of the names of all the widgets in this container
            </summary>
        </member>
        <member name="M:TGUI.Container.GetWidgetNames">
            <summary>
            Returns a list of the names of all the widgets in this container
            </summary>
            <returns>
            List of widget names belonging to the widgets that were added to the container
            </returns>
        </member>
        <member name="M:TGUI.Container.Remove(TGUI.Widget)">
            <summary>
            Removes a single widget that was added to the container
            </summary>
            <param name="widget">Widget to remove</param>
            <returns>
            True when widget is removed, false when widget was not found
            </returns>
        </member>
        <member name="M:TGUI.Container.RemoveAllWidgets">
            <summary>
            Removes all widgets that were added to the container
            </summary>
        </member>
        <member name="M:TGUI.Container.MoveWidgetToFront(TGUI.Widget)">
            <summary>
            Places a widget before all other widgets
            </summary>
        </member>
        <member name="M:TGUI.Container.MoveWidgetToBack(TGUI.Widget)">
            <summary>
            Places a widget behind all other widgets
            </summary>
        </member>
        <member name="M:TGUI.Container.GetFocusedChild">
            <summary>
            Returns the child widget that is focused inside this container
            </summary>
            <returns>Focused child widget or null if none of the widgets are currently focused</returns>
            <remarks>
            If the focused widget is a container then that container is returned. If you want to know which widget
            is focused inside that container (recursively) then you should use the GetFocusedLeaf() function.
            </remarks>
        </member>
        <member name="M:TGUI.Container.GetFocusedLeaf">
            <summary>
            Returns the leaf child widget that is focused inside this container
            </summary>
            <returns>Focused leaf child widget or null if none of the widgets are currently focused</returns>
            <remarks>
            If the focused widget is a container then the GetFocusedLeaf() is recursively called on that container. If you want
            to limit the search to only direct children of this container then you should use the GetFocusedChild() function.
            </remarks>
        </member>
        <member name="M:TGUI.Container.GetWidgetAtPosition(System.Single,System.Single)">
            <summary>
            Returns the leaf child widget that is located at the given position
            </summary>
            <param name="x">The x position where the widget will be searched, relative to the container</param>
            <param name="y">The y position where the widget will be searched, relative to the container</param>
            <returns>Widget at the queried position, or null when there is no widget at that location</returns>
        </member>
        <member name="M:TGUI.Container.FocusNextWidget">
            <summary>
            Focuses the next widget in this container
            </summary>
            <returns>
            Whether a new widget was focused
            </returns>
        </member>
        <member name="M:TGUI.Container.FocusPreviousWidget">
            <summary>
            Focuses the previous widget in this container
            </summary>
            <returns>
            Whether a new widget was focused
            </returns>
        </member>
        <member name="P:TGUI.Container.InnerSize">
            <summary>
            Gets the space available for widgets inside the container
            </summary>
        </member>
        <member name="P:TGUI.Container.ChildWidgetsOffset">
            <summary>
            Gets the distance between the position of the container and a widget that would be drawn inside
            this container on relative position (0,0)
            </summary>
        </member>
        <member name="M:TGUI.Container.LoadWidgetsFromFile(System.String,System.Boolean)">
            <summary>
            Loads the child widgets from a text file
            </summary>
            <param name="filename">Filename of the widget file</param>
            <param name="replaceExisting">Remove existing widgets first if there are any</param>
            <exception cref="T:TGUI.TGUIException">Thrown when file could not be opened or parsing failed</exception>
        </member>
        <member name="M:TGUI.Container.SaveWidgetsToFile(System.String)">
            <summary>
            Saves the child widgets to a text file
            </summary>
            <param name="filename">Filename of the widget file</param>
            <exception cref="T:TGUI.TGUIException">Thrown when file could not be opened for writing</exception>
        </member>
        <member name="P:TGUI.Container.ParentGui">
            <summary>
            Gets the gui to which the widget was added.
            </summary>
            <remarks>
            The setter is only intended for internal use.
            </remarks>
        </member>
        <member name="M:TGUI.Container.AddNewWidgetsAfterLoadFromFile">
            <summary>
            Create the new C# widgets for all the the c++ widgets that got added
            </summary>
        </member>
        <member name="F:TGUI.Global.CTGUI">
            <summary>Name of the CTGUI library to import</summary>
        </member>
        <member name="P:TGUI.Global.Font">
            <summary>
            Gets or sets the default font for all new widgets
            </summary>
        </member>
        <member name="P:TGUI.Global.TextSize">
            <summary>
            Gets or sets the default text size for all new widgets
            </summary>
        </member>
        <member name="P:TGUI.Global.EditCursorBlinkRate">
            <summary>
            Gets or sets the blink rate of the cursor in edit fields such as EditBox and TextBox (in milliseconds)
            </summary>
        </member>
        <member name="T:TGUI.Gui">
            <summary>
            Gui class that acts as the root container
            </summary>
        </member>
        <member name="M:TGUI.Gui.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            You will still need to set the Target property before using the Gui
            </remarks>
        </member>
        <member name="M:TGUI.Gui.#ctor(SFML.Graphics.RenderWindow)">
            <summary>
            Default constructor that sets the window on which the gui should be drawn
            </summary>
            <param name="window">Window to draw the gui on</param>
        </member>
        <member name="M:TGUI.Gui.Destroy(System.Boolean)">
            <summary>
            Destroy the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call?</param>
        </member>
        <member name="P:TGUI.Gui.Target">
            <summary>
            Gets or sets the window on which the gui should be drawn
            </summary>
        </member>
        <member name="P:TGUI.Gui.View">
            <summary>
            Sets the view that is used to render the gui
            </summary>
        </member>
        <member name="P:TGUI.Gui.Font">
            <summary>
            Sets the font that should be used by all widgets added to this gui
            </summary>
        </member>
        <member name="M:TGUI.Gui.Add(TGUI.Widget,System.String)">
            <summary>
            Adds a widget to the gui
            </summary>
            <param name="widget">The widget you would like to add</param>
            <param name="widgetName">You can give the widget a unique name to retrieve it from the gui later</param>
            <remarks>
            The widget name should not contain whitespace
            </remarks>
        </member>
        <member name="M:TGUI.Gui.Get(System.String)">
            <summary>
            Returns a widget that was added earlier
            </summary>
            <param name="widgetName">The name that was given to the widget when it was added to the gui</param>
            <returns>
            The earlier added widget
            </returns>
            <remarks>
            The gui will first search for widgets that are direct children of it, but when none of the child widgets match
            the given name, a recursive search will be performed.
            The function returns null when an unknown widget name was passed.
            </remarks>
        </member>
        <member name="P:TGUI.Gui.Widgets">
            <summary>
            Gets a list of all the widgets in this gui or completely replace all widgets with a new list
            </summary>
            <remarks>
            Setting this property is equivalent to calling RemoveAllWidgets() and then call Add(widget) for every widget in the list.
            By setting the widgets via this property you lose the ability to give a name to the widget for later retrieval.
            </remarks>
        </member>
        <member name="M:TGUI.Gui.GetWidgets">
            <summary>
            Returns a list of all the widgets in this gui
            </summary>
            <returns>
            List of widgets that have been added to the gui
            </returns>
        </member>
        <member name="P:TGUI.Gui.WidgetNames">
            <summary>
            Gets the list of the names of all the widgets in this gui
            </summary>
        </member>
        <member name="M:TGUI.Gui.GetWidgetNames">
            <summary>
            Returns a list of the names of all the widgets in this gui
            </summary>
            <returns>
            List of widget names belonging to the widgets that were added to the gui
            </returns>
        </member>
        <member name="M:TGUI.Gui.Remove(TGUI.Widget)">
            <summary>
            Removes a single widget that was added to the gui
            </summary>
            <param name="widget">Widget to remove</param>
            <returns>
            True when widget is removed, false when widget was not found
            </returns>
        </member>
        <member name="M:TGUI.Gui.RemoveAllWidgets">
            <summary>
            Removes all widgets that were added to the container
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TGUI.Gui.MoveWidgetToFront(TGUI.Widget)" -->
        <member name="M:TGUI.Gui.MoveWidgetToBack(TGUI.Widget)">
            <summary>
            Places a widget behind all other widgets
            </summary>
        </member>
        <member name="M:TGUI.Gui.GetFocusedChild">
            <summary>
            Returns the child widget that is focused inside this container
            </summary>
            <returns>Focused child widget or null if none of the widgets are currently focused</returns>
            <remarks>
            If the focused widget is a container then that container is returned. If you want to know which widget
            is focused inside that container (recursively) then you should use the GetFocusedLeaf() function.
            </remarks>
        </member>
        <member name="M:TGUI.Gui.GetFocusedLeaf">
            <summary>
            Returns the leaf child widget that is focused inside this container
            </summary>
            <returns>Focused leaf child widget or null if none of the widgets are currently focused</returns>
            <remarks>
            If the focused widget is a container then the GetFocusedLeaf() is recursively called on that container. If you want
            to limit the search to only direct children of this container then you should use the GetFocusedChild() function.
            </remarks>
        </member>
        <member name="M:TGUI.Gui.GetWidgetAtPosition(System.Single,System.Single)">
            <summary>
            Returns the leaf child widget that is located at the given position
            </summary>
            <param name="x">The x position where the widget will be searched, relative to the gui view</param>
            <param name="y">The y position where the widget will be searched, relative to the gui view</param>
            <returns>Widget at the queried position, or null when there is no widget at that location</returns>
            <remarks>
            To use pixel coordinates instead of a position relative to the view, use the GetWidgetBelowMouseCursor function.
            </remarks>
        </member>
        <member name="M:TGUI.Gui.GetWidgetBelowMouseCursor(System.Int32,System.Int32)">
            <summary>
            Returns the leaf child widget below the mouse
            </summary>
            <param name="mouseX">X position of the mouse, in pixel coordinates, relative the the window</param>
            <param name="mouseY">Y position of the mouse, in pixel coordinates, relative the the window</param>
            <returns>Widget below the mouse, or null when the mouse isn't on top of any widgets</returns>
            <remarks>
            To coordinates relative to the view instead of absolute pixel coordinates, use the GetWidgetAtPosition function.
            </remarks>
        </member>
        <member name="M:TGUI.Gui.FocusNextWidget">
            <summary>
            Focuses the next widget in the gui
            </summary>
            <returns>
            Whether a new widget was focused
            </returns>
        </member>
        <member name="M:TGUI.Gui.FocusPreviousWidget">
            <summary>
            Focuses the previous widget in the gui
            </summary>
            <returns>
            Whether a new widget was focused
            </returns>
        </member>
        <member name="P:TGUI.Gui.TabKeyUsageEnabled">
            <summary>
            Gets or sets whether pressing tab will focus another widget
            </summary>
        </member>
        <member name="M:TGUI.Gui.Draw">
            <summary>
            Draws all the widgets that were added to the gui
            </summary>
        </member>
        <member name="P:TGUI.Gui.Opacity">
            <summary>
            Gets or sets the opacity of all widgets that are added to the gui
            </summary>
            <remarks>
            0 means completely transparent, while 1 (default) means fully opaque
            </remarks>
        </member>
        <member name="P:TGUI.Gui.TextSize">
            <summary>
            Gets or sets the character size of all existing and future child widgets
            </summary>
            <remarks>
            The text size specified here overrides the global text size property. By default, the gui does not
            pass any text size to the widgets and the widgets will use the global text size as default value.
            </remarks>
        </member>
        <member name="M:TGUI.Gui.LoadWidgetsFromFile(System.String,System.Boolean)">
            <summary>
            Loads the child widgets from a text file
            </summary>
            <param name="filename">Filename of the widget file</param>
            <param name="replaceExisting">Remove existing widgets first if there are any</param>
            <exception cref="T:TGUI.TGUIException">Thrown when file could not be opened or parsing failed</exception>
        </member>
        <member name="M:TGUI.Gui.SaveWidgetsToFile(System.String)">
            <summary>
            Saves the child widgets to a text file
            </summary>
            <param name="filename">Filename of the widget file</param>
            <exception cref="T:TGUI.TGUIException">Thrown when file could not be opened for writing</exception>
        </member>
        <member name="P:TGUI.Gui.DrawingUpdatesTime">
            <summary>
            Sets whether Draw() updates the clock (default), or whether you need to call UpdateTime() on the Gui
            </summary>
        </member>
        <member name="M:TGUI.Gui.UpdateTime">
            <summary>
            Updates the internal clock (for timers, animations and blinking edit cursors)
            </summary>
            <returns>True if the the contents of the screen changed, false if nothing changed</returns>
            <remarks>
            You do not need to call this function unless you set DrawingUpdatesTime to false (it is true by default).
            </remarks>
        </member>
        <member name="P:TGUI.Gui.EventFilter">
            <summary>
            Gets or sets the filter function that determines whether the gui should handle the event
            </summary>
            <remarks>
            By default the event filter is null and the gui will handle all events.
            You can set a function here that takes an event as parameter and returns whether or not
            the gui should handle this event.
            </remarks>
        </member>
        <member name="M:TGUI.Gui.HandleEvent(SFML.Window.Event)">
            <summary>
            Passes the event to the widgets
            </summary>
            <param name="ev">The event that was polled from the window</param>
            <returns>
            Has the event been consumed?
            When this function returns false, then the event was ignored by all widgets.
            </returns>
        </member>
        <member name="M:TGUI.Gui.AddNewWidgetsAfterLoadFromFile">
            <summary>
            Create the new C# widgets for all the the c++ widgets that got added
            </summary>
        </member>
        <member name="E:TGUI.Gui.EventProcessed">
            <summary>Event handler that provides a callback for each event processed by the gui</summary>
        </member>
        <member name="T:TGUI.Layout">
            <summary>
            Layout stores either a value or a string expression that is used to represent a Left, Top, Width or Height property
            </summary>
        </member>
        <member name="M:TGUI.Layout.#ctor(System.Single)">
            <summary>
            Construct the layout with a constant value
            </summary>
            <param name="constant">Constant value to store in the layout</param>
        </member>
        <member name="M:TGUI.Layout.#ctor(System.String)">
            <summary>
            Construct the layout with a string expression which will be parsed to determine the value of the layout
            </summary>
            <param name="expression">String to parse</param>
        </member>
        <member name="M:TGUI.Layout.#ctor(TGUI.Layout)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="M:TGUI.Layout.Destroy(System.Boolean)">
            <summary>
            Destroy the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call?</param>
        </member>
        <member name="P:TGUI.Layout.Value">
            <summary>
            Gets the current value of the layout
            </summary>
        </member>
        <member name="T:TGUI.Outline">
            <summary>
            Outline is used to define padding and borders
            </summary>
        </member>
        <member name="M:TGUI.Outline.#ctor(System.Single)">
            <summary>
            Construct the outline
            </summary>
            <param name="size">Width and height of the outline in all directions</param>
        </member>
        <member name="M:TGUI.Outline.#ctor(System.String)">
            <summary>
            Construct the outline
            </summary>
            <param name="size">Width and height of the outline in all directions</param>
        </member>
        <member name="M:TGUI.Outline.#ctor(System.Single,System.Single)">
            <summary>
            Construct the outline
            </summary>
            <param name="width">Width of the left and right outline</param>
            <param name="height">Height of the top and bottom outline</param>
        </member>
        <member name="M:TGUI.Outline.#ctor(System.String,System.String)">
            <summary>
            Construct the outline
            </summary>
            <param name="width">Width of the left and right outline</param>
            <param name="height">Height of the top and bottom outline</param>
        </member>
        <member name="M:TGUI.Outline.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct the outline
            </summary>
            <param name="left">Width of the left outline</param>
            <param name="top">Height of the top outline</param>
            <param name="right">Width of the right outline</param>
            <param name="bottom">Height of the bottom outline</param>
        </member>
        <member name="M:TGUI.Outline.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Construct the outline
            </summary>
            <param name="left">Width of the left outline</param>
            <param name="top">Height of the top outline</param>
            <param name="right">Width of the right outline</param>
            <param name="bottom">Height of the bottom outline</param>
        </member>
        <member name="M:TGUI.Outline.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.Outline.#ctor(TGUI.Outline)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="M:TGUI.Outline.Destroy(System.Boolean)">
            <summary>
            Destroy the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call?</param>
        </member>
        <member name="P:TGUI.Outline.Left">
            <summary>
            Gets the width of the left outline
            </summary>
        </member>
        <member name="P:TGUI.Outline.Top">
            <summary>
            Gets the height of the top outline
            </summary>
        </member>
        <member name="P:TGUI.Outline.Right">
            <summary>
            Gets the width of the right outline
            </summary>
        </member>
        <member name="P:TGUI.Outline.Bottom">
            <summary>
            Gets the height of the bottom outline
            </summary>
        </member>
        <member name="T:TGUI.ButtonRenderer">
            <summary>
            Renderer for button widgets
            </summary>
        </member>
        <member name="M:TGUI.ButtonRenderer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.ButtonRenderer.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.ButtonRenderer.#ctor(TGUI.ButtonRenderer)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.ButtonRenderer.Borders">
            <summary>
            Gets or sets the size of the borders
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.TextColor">
            <summary>
            Gets or sets the text color
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.TextColorHover">
            <summary>
            Gets or sets the text color when the button is in hover state
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.TextColorDown">
            <summary>
            Gets or sets the text color when the button is in down state
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.TextColorFocused">
            <summary>
            Gets or sets the text color when the button is in focused state
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.TextColorDisabled">
            <summary>
            Gets or sets the text color when the button is in disabled state
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.BackgroundColor">
            <summary>
            Gets or sets the background color
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.BackgroundColorHover">
            <summary>
            Gets or sets the background color when the button is in hover state
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.BackgroundColorDown">
            <summary>
            Gets or sets the background color when the button is in down state
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.BackgroundColorFocused">
            <summary>
            Gets or sets the background color when the button is in focused state
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.BackgroundColorDisabled">
            <summary>
            Gets or sets the background color when the button is in disabled state
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.TextOutlineColor">
            <summary>
            Gets or sets the outline color of the text
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.TextOutlineThickness">
            <summary>
            Gets or sets the outline thickness of the text
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.BorderColor">
            <summary>
            Gets or sets the color of the borders
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.BorderColorHover">
            <summary>
            Gets or sets the color of the borders when the button is in hover state
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.BorderColorDown">
            <summary>
            Gets or sets the color of the borders when the button is in down state
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.BorderColorFocused">
            <summary>
            Gets or sets the color of the borders when the button is in focused state
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.BorderColorDisabled">
            <summary>
            Gets or sets the color of the borders when the button is in disabled state
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.Texture">
            <summary>
            Gets or sets the background texture
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.TextureHover">
            <summary>
            Gets or sets the background texture when the button is in hover state
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.TextureDown">
            <summary>
            Gets or sets the background texture when the button is in down state
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.TextureFocused">
            <summary>
            Gets or sets the background texture when the button is in focused state
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.TextureDisabled">
            <summary>
            Gets or sets the background texture when the button is in disabled state
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.TextStyle">
            <summary>
            Gets or sets the text style
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.TextStyleHover">
            <summary>
            Gets or sets the text style when the button is in hover state
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.TextStyleDown">
            <summary>
            Gets or sets the text style when the button is in down state
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.TextStyleFocused">
            <summary>
            Gets or sets the text style when the button is in focused state
            </summary>
        </member>
        <member name="P:TGUI.ButtonRenderer.TextStyleDisabled">
            <summary>
            Gets or sets the text style when the button is in disabled state
            </summary>
        </member>
        <member name="M:TGUI.ChildWindowRenderer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.ChildWindowRenderer.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.ChildWindowRenderer.#ctor(TGUI.ChildWindowRenderer)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.ChildWindowRenderer.Borders">
            <summary>
            Gets or sets the size of the borders
            </summary>
        </member>
        <member name="P:TGUI.ChildWindowRenderer.TitleBarColor">
            <summary>
            Gets or sets the color of the title bar
            </summary>
        </member>
        <member name="P:TGUI.ChildWindowRenderer.TitleColor">
            <summary>
            Gets or sets the color of the text in the title bar
            </summary>
        </member>
        <member name="P:TGUI.ChildWindowRenderer.BackgroundColor">
            <summary>
            Gets or sets the background color
            </summary>
        </member>
        <member name="P:TGUI.ChildWindowRenderer.BorderColor">
            <summary>
            Gets or sets the color of the borders
            </summary>
        </member>
        <member name="P:TGUI.ChildWindowRenderer.BorderColorFocused">
            <summary>
            Gets or sets the color of the borders while the child window is focused
            </summary>
        </member>
        <member name="P:TGUI.ChildWindowRenderer.BorderBelowTitleBar">
            <summary>
            Gets or sets the size of the border between the title bar and the window contents
            </summary>
        </member>
        <member name="P:TGUI.ChildWindowRenderer.TitleBarHeight">
            <summary>
            Gets or sets the height of the title bar
            </summary>
        </member>
        <member name="P:TGUI.ChildWindowRenderer.DistanceToSide">
            <summary>
            Gets or sets the distance between the title or close button from the side of the title bar
            </summary>
        </member>
        <member name="P:TGUI.ChildWindowRenderer.PaddingBetweenButtons">
            <summary>
            Gets or sets the distance between the title buttons if multiple exist
            </summary>
        </member>
        <member name="P:TGUI.ChildWindowRenderer.MinimumResizableBorderWidth">
            <summary>
            Gets or sets the minimum amount of pixels where the child window can be dragged to resize it
            </summary>
            <remarks>
            If the border is larger than this value then this property has no effect. If the borders are smaller,
            several invisible pixels on the outside to the border can also be used to resize the child window.
            </remarks>
        </member>
        <member name="P:TGUI.ChildWindowRenderer.ShowTextOnTitleButtons">
            <summary>
            Gets or sets whether characters are rendered on top of the title buttons (e.g. "x" on close button)
            </summary>
        </member>
        <member name="P:TGUI.ChildWindowRenderer.TextureTitleBar">
            <summary>
            Gets or sets the texture of the title bar
            </summary>
        </member>
        <member name="P:TGUI.ChildWindowRenderer.TextureBackground">
            <summary>
            Gets or sets the background texture
            </summary>
        </member>
        <member name="P:TGUI.ChildWindowRenderer.CloseButton">
            <summary>
            Gets or sets the look of the close button
            </summary>
        </member>
        <member name="P:TGUI.ChildWindowRenderer.MaximizeButton">
            <summary>
            Gets or sets the look of the maximize button
            </summary>
        </member>
        <member name="P:TGUI.ChildWindowRenderer.MinimizeButton">
            <summary>
            Gets or sets the look of the minimize button
            </summary>
        </member>
        <member name="T:TGUI.EditBoxRenderer">
            <summary>
            Renderer for edit box widgets
            </summary>
        </member>
        <member name="M:TGUI.EditBoxRenderer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.EditBoxRenderer.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.EditBoxRenderer.#ctor(TGUI.EditBoxRenderer)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.EditBoxRenderer.Borders">
            <summary>
            Gets or sets the size of the borders
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.Padding">
            <summary>
            Gets or sets the size of the padding
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.CaretWidth">
            <summary>
            Gets or sets the width of the caret
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.TextColor">
            <summary>
            Gets or sets the text color
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.DefaultTextColor">
            <summary>
            Gets or sets the text color of the default text that can optionally be displayed when the edit box is empty
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.TextColorFocused">
            <summary>
            Gets or sets the text color that will be used inside the edit box when the edit box is focused
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.TextColorDisabled">
            <summary>
            Gets or sets the text color that will be used inside the edit box when the edit box is disabled
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.SelectedTextColor">
            <summary>
            Gets or sets the text color of the selected text that will be used inside the edit box
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.SelectedTextBackgroundColor">
            <summary>
            Gets or sets the background color of the selected text that will be used inside the edit box
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.BackgroundColor">
            <summary>
            Gets or sets the background color
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.BackgroundColorHover">
            <summary>
            Gets or sets the background color in the hover state
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.BackgroundColorFocused">
            <summary>
            Gets or sets the background color when the edit box is focused
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.BackgroundColorDisabled">
            <summary>
            Gets or sets the background color when the edit box is disabled
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.CaretColor">
            <summary>
            Gets or sets the color that will be used inside the edit box for the blinking caret
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.CaretColorHover">
            <summary>
            Gets or sets the color that will be used inside the edit box for the blinking caret when the mouse is on top of the edit box
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.CaretColorFocused">
            <summary>
            Gets or sets the color that will be used inside the edit box for the blinking caret when the edit box is focused
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.BorderColor">
            <summary>
            Gets or sets the color of the borders
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.BorderColorHover">
            <summary>
            Gets or sets the color of the borders when the mouse is on top of the edit box
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.BorderColorFocused">
            <summary>
            Gets or sets the color of the borders when the edit box is focused
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.BorderColorDisabled">
            <summary>
            Gets or sets the color of the borders when the edit box is disabled
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.Texture">
            <summary>
            Gets or sets the background image that is displayed
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.TextureHover">
            <summary>
            Gets or sets the background image that is displayed when the mouse is on top of the edit box
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.TextureFocused">
            <summary>
            Gets or sets the background image that is displayed when the edit box is focused
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.TextureDisabled">
            <summary>
            Gets or sets the background image that is displayed when the edit box is disabled
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.TextStyle">
            <summary>
            Gets or sets the text style
            </summary>
        </member>
        <member name="P:TGUI.EditBoxRenderer.DefaultTextStyle">
            <summary>
            Gets or sets the text style of the default text (the text drawn when the edit box is empty)
            </summary>
        </member>
        <member name="T:TGUI.LabelRenderer">
            <summary>
            Renderer for label widgets
            </summary>
        </member>
        <member name="M:TGUI.LabelRenderer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.LabelRenderer.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.LabelRenderer.#ctor(TGUI.LabelRenderer)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.LabelRenderer.Borders">
            <summary>
            Gets or sets the size of the borders
            </summary>
        </member>
        <member name="P:TGUI.LabelRenderer.Padding">
            <summary>
            Gets or sets the size of the padding
            </summary>
        </member>
        <member name="P:TGUI.LabelRenderer.TextColor">
            <summary>
            Gets or sets the text color
            </summary>
        </member>
        <member name="P:TGUI.LabelRenderer.TextOutlineColor">
            <summary>
            Gets or sets the outline color of the text
            </summary>
        </member>
        <member name="P:TGUI.LabelRenderer.TextOutlineThickness">
            <summary>
            Gets or sets the outline thickness of the text
            </summary>
        </member>
        <member name="P:TGUI.LabelRenderer.BackgroundColor">
            <summary>
            Gets or sets the background color
            </summary>
        </member>
        <member name="P:TGUI.LabelRenderer.BorderColor">
            <summary>
            Gets or sets the color of the borders
            </summary>
        </member>
        <member name="P:TGUI.LabelRenderer.TextStyle">
            <summary>
            Gets or sets the text style
            </summary>
        </member>
        <member name="P:TGUI.LabelRenderer.Scrollbar">
            <summary>
            Gets or sets the renderer data of the scrollbar
            </summary>
        </member>
        <member name="P:TGUI.LabelRenderer.ScrollbarWidth">
            <summary>
            Gets or sets the width of the scrollbar
            </summary>
        </member>
        <member name="P:TGUI.LabelRenderer.TextureBackground">
            <summary>
            Gets or sets the background texture
            </summary>
        </member>
        <member name="T:TGUI.ListBoxRenderer">
            <summary>
            Renderer for list box widgets
            </summary>
        </member>
        <member name="M:TGUI.ListBoxRenderer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.ListBoxRenderer.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.ListBoxRenderer.#ctor(TGUI.ListBoxRenderer)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.ListBoxRenderer.Borders">
            <summary>
            Gets or sets the size of the borders
            </summary>
        </member>
        <member name="P:TGUI.ListBoxRenderer.Padding">
            <summary>
            Gets or sets the size of the padding
            </summary>
        </member>
        <member name="P:TGUI.ListBoxRenderer.BackgroundColor">
            <summary>
            Gets or sets the background color
            </summary>
        </member>
        <member name="P:TGUI.ListBoxRenderer.BackgroundColorHover">
            <summary>
            Gets or sets the background color used for the item below the mouse
            </summary>
        </member>
        <member name="P:TGUI.ListBoxRenderer.SelectedBackgroundColor">
            <summary>
            Gets or sets the background color of the selected item
            </summary>
        </member>
        <member name="P:TGUI.ListBoxRenderer.SelectedBackgroundColorHover">
            <summary>
            Gets or sets the background color used for the selected item when the mouse hovers over it
            </summary>
        </member>
        <member name="P:TGUI.ListBoxRenderer.TextColor">
            <summary>
            Gets or sets the text color
            </summary>
        </member>
        <member name="P:TGUI.ListBoxRenderer.TextColorHover">
            <summary>
            Gets or sets the text color of the item below the mouse
            </summary>
        </member>
        <member name="P:TGUI.ListBoxRenderer.SelectedTextColor">
            <summary>
            Gets or sets the text color of the selected item
            </summary>
        </member>
        <member name="P:TGUI.ListBoxRenderer.SelectedTextColorHover">
            <summary>
            Gets or sets the text color of the selected item when the mouse hovers over it
            </summary>
        </member>
        <member name="P:TGUI.ListBoxRenderer.BorderColor">
            <summary>
            Gets or sets the color of the borders
            </summary>
        </member>
        <member name="P:TGUI.ListBoxRenderer.TextureBackground">
            <summary>
            Sets the texture used as background
            </summary>
        </member>
        <member name="P:TGUI.ListBoxRenderer.TextStyle">
            <summary>
            Gets the text style of the items
            </summary>
        </member>
        <member name="P:TGUI.ListBoxRenderer.SelectedTextStyle">
            <summary>
            Gets the text style of the selected item
            </summary>
        </member>
        <member name="P:TGUI.ListBoxRenderer.Scrollbar">
            <summary>
            Gets or sets the renderer data of the scrollbar
            </summary>
        </member>
        <member name="P:TGUI.ListBoxRenderer.ScrollbarWidth">
            <summary>
            Gets or sets the width of the scrollbar
            </summary>
        </member>
        <member name="T:TGUI.ListViewRenderer">
            <summary>
            Renderer for list view widgets
            </summary>
        </member>
        <member name="M:TGUI.ListViewRenderer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.ListViewRenderer.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.ListViewRenderer.#ctor(TGUI.ListViewRenderer)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.ListViewRenderer.Borders">
            <summary>
            Gets or sets the size of the borders
            </summary>
        </member>
        <member name="P:TGUI.ListViewRenderer.Padding">
            <summary>
            Gets or sets the size of the padding
            </summary>
        </member>
        <member name="P:TGUI.ListViewRenderer.BackgroundColor">
            <summary>
            Gets or sets the background color
            </summary>
        </member>
        <member name="P:TGUI.ListViewRenderer.BackgroundColorHover">
            <summary>
            Gets or sets the background color used for the item below the mouse
            </summary>
        </member>
        <member name="P:TGUI.ListViewRenderer.SelectedBackgroundColor">
            <summary>
            Gets or sets the background color of the selected item
            </summary>
        </member>
        <member name="P:TGUI.ListViewRenderer.SelectedBackgroundColorHover">
            <summary>
            Gets or sets the background color used for the selected item when the mouse hovers over it
            </summary>
        </member>
        <member name="P:TGUI.ListViewRenderer.TextColor">
            <summary>
            Gets or sets the text color
            </summary>
        </member>
        <member name="P:TGUI.ListViewRenderer.TextColorHover">
            <summary>
            Gets or sets the text color of the item below the mouse
            </summary>
        </member>
        <member name="P:TGUI.ListViewRenderer.SelectedTextColor">
            <summary>
            Gets or sets the text color of the selected item
            </summary>
        </member>
        <member name="P:TGUI.ListViewRenderer.SelectedTextColorHover">
            <summary>
            Gets or sets the text color of the selected item when the mouse hovers over it
            </summary>
        </member>
        <member name="P:TGUI.ListViewRenderer.HeaderBackgroundColor">
            <summary>
            Gets or sets the background color of the header
            </summary>
        </member>
        <member name="P:TGUI.ListViewRenderer.HeaderTextColor">
            <summary>
            Gets or sets the text color of the header captions
            </summary>
        </member>
        <member name="P:TGUI.ListViewRenderer.BorderColor">
            <summary>
            Gets or sets the color of the borders
            </summary>
        </member>
        <member name="P:TGUI.ListViewRenderer.SeparatorColor">
            <summary>
            Gets or sets the color of the separators
            </summary>
            <remarks>
            The border color will be used when no separator color is set.
            </remarks>
        </member>
        <member name="P:TGUI.ListViewRenderer.GridLinesColor">
            <summary>
            Gets or sets the color of the grid lines
            </summary>
            <remarks>
            The separator color will be used when no grid line color is set.
            </remarks>
        </member>
        <member name="P:TGUI.ListViewRenderer.Scrollbar">
            <summary>
            Gets or sets the renderer data of the scrollbar
            </summary>
        </member>
        <member name="P:TGUI.ListViewRenderer.ScrollbarWidth">
            <summary>
            Gets or sets the width of the scrollbar
            </summary>
        </member>
        <member name="T:TGUI.MenuBarRenderer">
            <summary>
            Renderer for the MenuBar widget
            </summary>
        </member>
        <member name="M:TGUI.MenuBarRenderer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.MenuBarRenderer.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
        </member>
        <member name="M:TGUI.MenuBarRenderer.#ctor(TGUI.MenuBarRenderer)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="P:TGUI.MenuBarRenderer.BackgroundColor">
            <summary>
            Gets or sets the background color
            </summary>
        </member>
        <member name="P:TGUI.MenuBarRenderer.SelectedBackgroundColor">
            <summary>
            Gets or sets the background color of the selected item
            </summary>
        </member>
        <member name="P:TGUI.MenuBarRenderer.TextColor">
            <summary>
            Gets or sets the color of the text
            </summary>
        </member>
        <member name="P:TGUI.MenuBarRenderer.SelectedTextColor">
            <summary>
            Gets or sets the color of the text from the selected item
            </summary>
        </member>
        <member name="P:TGUI.MenuBarRenderer.TextColorDisabled">
            <summary>
            Gets or sets the color of the text when disabled
            </summary>
        </member>
        <member name="P:TGUI.MenuBarRenderer.TextureBackground">
            <summary>
            Sets the image that is used to fill the entire menu bar
            </summary>
        </member>
        <member name="P:TGUI.MenuBarRenderer.TextureItemBackground">
            <summary>
            Sets the image that is displayed when the menu item is not selected
            </summary>
        </member>
        <member name="P:TGUI.MenuBarRenderer.TextureSelectedItemBackground">
            <summary>
            Sets the image that is used as background of the selected menu item
            </summary>
        </member>
        <member name="P:TGUI.MenuBarRenderer.DistanceToSide">
            <summary>
            Gets or sets the distance between the text and the side of the menu item
            </summary>
        </member>
        <member name="M:TGUI.PanelRenderer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.PanelRenderer.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.PanelRenderer.#ctor(TGUI.PanelRenderer)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.PanelRenderer.Borders">
            <summary>
            Gets or sets the size of the borders
            </summary>
        </member>
        <member name="P:TGUI.PanelRenderer.BackgroundColor">
            <summary>
            Gets or sets the background color
            </summary>
        </member>
        <member name="P:TGUI.PanelRenderer.BorderColor">
            <summary>
            Gets or sets the color of the borders
            </summary>
        </member>
        <member name="P:TGUI.PanelRenderer.TextureBackground">
            <summary>
            Gets or sets the background texture
            </summary>
        </member>
        <member name="T:TGUI.TextBoxRenderer">
            <summary>
            Renderer for text box widgets
            </summary>
        </member>
        <member name="M:TGUI.TextBoxRenderer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.TextBoxRenderer.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.TextBoxRenderer.#ctor(TGUI.TextBoxRenderer)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.TextBoxRenderer.Borders">
            <summary>
            Gets or sets the size of the borders
            </summary>
        </member>
        <member name="P:TGUI.TextBoxRenderer.Padding">
            <summary>
            Gets or sets the size of the padding
            </summary>
        </member>
        <member name="P:TGUI.TextBoxRenderer.BackgroundColor">
            <summary>
            Gets or sets the background color
            </summary>
        </member>
        <member name="P:TGUI.TextBoxRenderer.TextColor">
            <summary>
            Gets or sets the text color
            </summary>
        </member>
        <member name="P:TGUI.TextBoxRenderer.DefaultTextColor">
            <summary>
            Gets or sets the text color of the default text that can optionally be displayed when the text box is empty
            </summary>
        </member>
        <member name="P:TGUI.TextBoxRenderer.SelectedTextColor">
            <summary>
            Gets or sets the text color of the selected text that will be used inside the text box
            </summary>
        </member>
        <member name="P:TGUI.TextBoxRenderer.SelectedTextBackgroundColor">
            <summary>
            Gets or sets the background color of the selected text that will be used inside the text box
            </summary>
        </member>
        <member name="P:TGUI.TextBoxRenderer.BorderColor">
            <summary>
            Gets or sets the color of the borders
            </summary>
        </member>
        <member name="P:TGUI.TextBoxRenderer.CaretColor">
            <summary>
            Gets or sets the color that will be used inside the text box for the blinking caret
            </summary>
        </member>
        <member name="P:TGUI.TextBoxRenderer.CaretWidth">
            <summary>
            Gets or sets the width of the caret
            </summary>
        </member>
        <member name="P:TGUI.TextBoxRenderer.TextureBackground">
            <summary>
            Gets or sets the background image that is displayed
            </summary>
        </member>
        <member name="P:TGUI.TextBoxRenderer.Scrollbar">
            <summary>
            Gets or sets the renderer data of the scrollbar
            </summary>
        </member>
        <member name="P:TGUI.TextBoxRenderer.ScrollbarWidth">
            <summary>
            Gets or sets the wanted width scrollbar (0 to use the default width, which is the texture width when using textures)
            </summary>
        </member>
        <member name="T:TGUI.TreeViewRenderer">
            <summary>
            Renderer for tree view widgets
            </summary>
        </member>
        <member name="M:TGUI.TreeViewRenderer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.TreeViewRenderer.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.TreeViewRenderer.#ctor(TGUI.TreeViewRenderer)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.TreeViewRenderer.Borders">
            <summary>
            Gets or sets the size of the borders
            </summary>
        </member>
        <member name="P:TGUI.TreeViewRenderer.Padding">
            <summary>
            Gets or sets the size of the padding
            </summary>
        </member>
        <member name="P:TGUI.TreeViewRenderer.BackgroundColor">
            <summary>
            Gets or sets the background color
            </summary>
        </member>
        <member name="P:TGUI.TreeViewRenderer.BackgroundColorHover">
            <summary>
            Gets or sets the background color used for the item below the mouse
            </summary>
        </member>
        <member name="P:TGUI.TreeViewRenderer.SelectedBackgroundColor">
            <summary>
            Gets or sets the background color of the selected item
            </summary>
        </member>
        <member name="P:TGUI.TreeViewRenderer.SelectedBackgroundColorHover">
            <summary>
            Gets or sets the background color used for the selected item when the mouse hovers over it
            </summary>
        </member>
        <member name="P:TGUI.TreeViewRenderer.TextColor">
            <summary>
            Gets or sets the text color
            </summary>
        </member>
        <member name="P:TGUI.TreeViewRenderer.TextColorHover">
            <summary>
            Gets or sets the text color of the item below the mouse
            </summary>
        </member>
        <member name="P:TGUI.TreeViewRenderer.SelectedTextColor">
            <summary>
            Gets or sets the text color of the selected item
            </summary>
        </member>
        <member name="P:TGUI.TreeViewRenderer.SelectedTextColorHover">
            <summary>
            Gets or sets the text color of the selected item when the mouse hovers over it
            </summary>
        </member>
        <member name="P:TGUI.TreeViewRenderer.BorderColor">
            <summary>
            Gets or sets the color of the borders
            </summary>
        </member>
        <member name="P:TGUI.TreeViewRenderer.TextureBranchExpanded">
            <summary>
            Sets the image used in front of an expanded item
            </summary>
        </member>
        <member name="P:TGUI.TreeViewRenderer.TextureBranchCollapsed">
            <summary>
            Sets the image used in front of an collapsed item
            </summary>
        </member>
        <member name="P:TGUI.TreeViewRenderer.TextureLeaf">
            <summary>
            Sets the image used in front of a leaf item
            </summary>
        </member>
        <member name="P:TGUI.TreeViewRenderer.Scrollbar">
            <summary>
            Gets or sets the renderer data of the scrollbar
            </summary>
        </member>
        <member name="P:TGUI.TreeViewRenderer.ScrollbarWidth">
            <summary>
            Gets or sets the width of the scrollbar
            </summary>
        </member>
        <member name="T:TGUI.WidgetRenderer">
            <summary>
            Base class for renderers of all widgets
            </summary>
        </member>
        <member name="M:TGUI.WidgetRenderer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.WidgetRenderer.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.WidgetRenderer.#ctor(TGUI.WidgetRenderer)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="M:TGUI.WidgetRenderer.Destroy(System.Boolean)">
             <summary>
             Destroy the object
             </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call?</param>
        </member>
        <member name="P:TGUI.WidgetRenderer.Opacity">
            <summary>
            Gets or sets the opacity of the widget
            </summary>
            <remarks>
            0 means completely transparent, while 1 (default) means fully opaque
            </remarks>
        </member>
        <member name="P:TGUI.WidgetRenderer.OpacityDisabled">
            <summary>
            Gets or sets the opacity of the widget when it is disabled
            </summary>
            <remarks>
            0 means completely transparent, while 1 (default) means fully opaque.
            Set to -1 (default) to use the normal opacity value even when the widget is disabled.
            </remarks>
        </member>
        <member name="P:TGUI.WidgetRenderer.Font">
            <summary>
            Gets or sets the font used for the text in the widget
            </summary>
            <remarks>
            When you don't set this font then the font from the parent widget will be used.
            </remarks>
        </member>
        <member name="P:TGUI.WidgetRenderer.TransparentTexture">
             <summary>
             Gets or sets whether mouse events should be ignored on transparent parts of the texture of the widget in normal state
             </summary>
             <remarks>
             When mouse events are ignored, they are passed to a widget behind the widget.
             By default, mouse events are NOT ignored and the widget will receive mouse events even on transparent texture parts.
            
             This property does nothing if the widget doesn't use textures.
             </remarks>
        </member>
        <member name="P:TGUI.WidgetRenderer.Data">
            <summary>
            Gets the renderer data that is shared between the renderers
            </summary>
        </member>
        <member name="M:TGUI.WidgetRenderer.ToString">
            <summary>
            Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:TGUI.SignalArgsVector2f">
            <summary>
            Argument for an event about a Vector2f
            </summary>
        </member>
        <member name="M:TGUI.SignalArgsVector2f.#ctor(SFML.System.Vector2f)">
            <summary>
            Constructor that creates the arguments object
            </summary>
            <param name="val">The Vector2f value</param>
        </member>
        <member name="F:TGUI.SignalArgsVector2f.Value">
            <summary>The Vector2f value</summary>
        </member>
        <member name="T:TGUI.SignalArgsString">
            <summary>
            Argument for an event about a string
            </summary>
        </member>
        <member name="M:TGUI.SignalArgsString.#ctor(System.String)">
            <summary>
            Constructor that creates the arguments object
            </summary>
            <param name="val">The string value</param>
        </member>
        <member name="F:TGUI.SignalArgsString.Value">
            <summary>The string value</summary>
        </member>
        <member name="T:TGUI.SignalArgsInt">
            <summary>
            Argument for an event about an int
            </summary>
        </member>
        <member name="M:TGUI.SignalArgsInt.#ctor(System.Int32)">
            <summary>
            Constructor that creates the arguments object
            </summary>
            <param name="val">The int value</param>
        </member>
        <member name="F:TGUI.SignalArgsInt.Value">
            <summary>The int value</summary>
        </member>
        <member name="T:TGUI.SignalArgsUInt">
            <summary>
            Argument for an event about an uint
            </summary>
        </member>
        <member name="M:TGUI.SignalArgsUInt.#ctor(System.UInt32)">
            <summary>
            Constructor that creates the arguments object
            </summary>
            <param name="val">The unsigned int value</param>
        </member>
        <member name="F:TGUI.SignalArgsUInt.Value">
            <summary>The unsigned int value</summary>
        </member>
        <member name="T:TGUI.SignalArgsFloat">
            <summary>
            Argument for an event about a float
            </summary>
        </member>
        <member name="M:TGUI.SignalArgsFloat.#ctor(System.Single)">
            <summary>
            Constructor that creates the arguments object
            </summary>
            <param name="val">The float value</param>
        </member>
        <member name="F:TGUI.SignalArgsFloat.Value">
            <summary>The float value</summary>
        </member>
        <member name="T:TGUI.SignalArgsRange">
            <summary>
            Argument for an event about a range
            </summary>
        </member>
        <member name="M:TGUI.SignalArgsRange.#ctor(System.Single,System.Single)">
            <summary>
            Constructor that creates the arguments object
            </summary>
            <param name="start">The start of the range</param>
            <param name="end">The end of the range</param>
        </member>
        <member name="F:TGUI.SignalArgsRange.Start">
            <summary>The start of the range</summary>
        </member>
        <member name="F:TGUI.SignalArgsRange.End">
            <summary>The end of the range</summary>
        </member>
        <member name="T:TGUI.SignalArgsBool">
            <summary>
            Argument for an event about a boolean
            </summary>
        </member>
        <member name="M:TGUI.SignalArgsBool.#ctor(System.Boolean)">
            <summary>
            Constructor that creates the arguments object
            </summary>
            <param name="val">The boolean value</param>
        </member>
        <member name="F:TGUI.SignalArgsBool.Value">
            <summary>The boolean value</summary>
        </member>
        <member name="T:TGUI.SignalArgsItem">
            <summary>
            Argument for an event about an item
            </summary>
        </member>
        <member name="M:TGUI.SignalArgsItem.#ctor(System.String,System.String)">
            <summary>
            Constructor that creates the arguments object
            </summary>
            <param name="item">The item in the event</param>
            <param name="id">The id of the item</param>
        </member>
        <member name="F:TGUI.SignalArgsItem.Item">
            <summary>The item in the event</summary>
        </member>
        <member name="F:TGUI.SignalArgsItem.Id">
            <summary>The id of the item</summary>
        </member>
        <member name="T:TGUI.SignalArgsAnimation">
            <summary>
            Argument for an event about a show or hide animation
            </summary>
        </member>
        <member name="M:TGUI.SignalArgsAnimation.#ctor(TGUI.ShowAnimationType,System.Boolean)">
            <summary>
            Constructor that creates the arguments object
            </summary>
            <param name="type">The type of the animation</param>
            <param name="visible">Is the widget being shown or being hidden?</param>
        </member>
        <member name="F:TGUI.SignalArgsAnimation.Type">
            <summary>The type of the animation</summary>
        </member>
        <member name="F:TGUI.SignalArgsAnimation.Visible">
            <summary>Is the widget being shown or being hidden?</summary>
        </member>
        <member name="T:TGUI.SignalArgsEventProcessed">
            <summary>
            Argument for the Gui.EventProcessed event
            </summary>
        </member>
        <member name="M:TGUI.SignalArgsEventProcessed.#ctor(SFML.Window.Event,System.Boolean)">
            <summary>
            Constructor that creates the arguments object
            </summary>
            <param name="ev">The event that was send to the gui</param>
            <param name="processed">Whether the gui did something with this event</param>
        </member>
        <member name="F:TGUI.SignalArgsEventProcessed.Event">
            <summary>The event that was send to the gui</summary>
        </member>
        <member name="F:TGUI.SignalArgsEventProcessed.Processed">
            <summary>Whether the gui did something with this event</summary>
        </member>
        <member name="T:TGUI.ToolTip">
            <summary>
            This class provides global settings for tool tips
            </summary>
        </member>
        <member name="P:TGUI.ToolTip.InitialDelay">
            <summary>
            Gets or sets the time that the mouse has to stand still before the tooltip becomes visible
            </summary>
        </member>
        <member name="P:TGUI.ToolTip.DistanceToMouse">
            <summary>
            Gets or sets the default distance between the mouse position and the tool tip
            </summary>
        </member>
        <member name="T:TGUI.Widget">
            <summary>
            Base class for all widgets
            </summary>
        </member>
        <member name="M:TGUI.Widget.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.Widget.#ctor(TGUI.Widget)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="M:TGUI.Widget.Destroy(System.Boolean)">
            <summary>
            Destroy the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call?</param>
        </member>
        <member name="P:TGUI.Widget.Position">
            <summary>
            Gets or sets the position of the widget inside its parent
            </summary>
        </member>
        <member name="P:TGUI.Widget.PositionLayout">
            <summary>
            Gets or sets the position of the widget inside its parent as a layout
            </summary>
        </member>
        <member name="M:TGUI.Widget.SetPosition(TGUI.Layout2d)">
            <summary>
            Sets the position of the widget inside its parent
            </summary>
            <param name="layout">Position of the widget that could be fixed or relative to the parent size</param>
        </member>
        <member name="P:TGUI.Widget.AbsolutePosition">
            <summary>
            Gets the absolute position of the widget instead of the relative position in its parent
            </summary>
        </member>
        <member name="P:TGUI.Widget.Size">
            <summary>
            Gets or sets the size of the widget
            </summary>
        </member>
        <member name="P:TGUI.Widget.SizeLayout">
            <summary>
            Sets the size of the widget as a layout
            </summary>
        </member>
        <member name="M:TGUI.Widget.SetSize(TGUI.Layout2d)">
            <summary>
            Sets the size of the widget
            </summary>
            <param name="layout">Size of the widget that could be fixed or relative to the parent size</param>
        </member>
        <member name="P:TGUI.Widget.FullSize">
            <summary>
            Gets the entire size that the widget is using
            </summary>
            <remarks>
            The full size will equal the size for most widgets.
            E.g a check box where the check mark leaves the box will have a larger full size. 
            </remarks>
        </member>
        <member name="P:TGUI.Widget.WidgetOffset">
            <summary>
            Gets the distance between the position where the widget is drawn and where the widget is placed
            </summary>
            <remarks>
            The offset is (0,0) for almost all widgets.
            E.g. a check box where the check mark leaves the box will have a negative vertical offset. 
            </remarks>
        </member>
        <member name="M:TGUI.Widget.Connect(System.String,System.Action)">
            <summary>
            Connect a signal handler that will be called when the signal is emitted
            </summary>
            <param name="signalName">Name of the signal to connect</param>
            <param name="func">Signal handler, taking no parameters</param>
            <returns>Unique id of the connection</returns>
        </member>
        <member name="M:TGUI.Widget.Connect(System.String,System.Action{TGUI.Widget})">
            <summary>
            Connect a signal handler that will be called when the signal is emitted
            </summary>
            <param name="signalName">Name of the signal to connect</param>
            <param name="func">Signal handler, taking the widget as parameter</param>
            <returns>Unique id of the connection</returns>
        </member>
        <member name="M:TGUI.Widget.Connect(System.String,System.Action{TGUI.Widget,System.String})">
            <summary>
            Connect a signal handler that will be called when the signal is emitted
            </summary>
            <param name="signalName">Name of the signal to connect</param>
            <param name="func">Signal handler, taking the widget and signal name as parameters</param>
            <returns>Unique id of the connection</returns>
        </member>
        <member name="M:TGUI.Widget.Disconnect(System.UInt32)">
            <summary>
            Disconnects a signal handler
            </summary>
            <param name="id">Id of the connection (returned by the Connect functions)</param>
        </member>
        <member name="M:TGUI.Widget.DisconnectAll(System.String)">
            <summary>
            Disconnects all signal handler from a certain signal
            </summary>
            <param name="signalName">Name of the signal</param>
        </member>
        <member name="M:TGUI.Widget.DisconnectAll">
            <summary>
            Disconnects all signal handlers from all signals
            </summary>
        </member>
        <member name="P:TGUI.Widget.Renderer">
            <summary>
            Gets or sets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
            <remarks>
            After retrieving the renderer, the widget has its own copy of the renderer and it will no longer be shared.
            </remarks>
        </member>
        <member name="P:TGUI.Widget.SharedRenderer">
            <summary>
            Gets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
        </member>
        <member name="M:TGUI.Widget.SetRenderer(TGUI.RendererData)">
            <summary>
            Sets new renderer data for the widget. The renderer determines how the widget looks.
            </summary>
            <param name="rendererData">new renderer data</param>
            <remarks>
            The renderer data is shared with this widget. When the data is changed, this widget will be updated as well.
            </remarks>
        </member>
        <member name="P:TGUI.Widget.Visible">
            <summary>
            Gets or sets whether the widget is shown or hidden
            </summary>
        </member>
        <member name="M:TGUI.Widget.ShowWithEffect(TGUI.ShowAnimationType,SFML.System.Time)">
             <summary>
             Shows the widget by introducing it with an animation
             </summary>
             <param name="type">Type of the animation</param>
             <param name="duration">Duration of the animation</param>
             <remarks>
             The animation will also be played if the widget was already visible.
            
             During the animation the position, size and/or opacity may change. Once the animation is done the widget will
             be back in the state in which it was when this function was called.
             </remarks>
        </member>
        <member name="M:TGUI.Widget.HideWithEffect(TGUI.ShowAnimationType,SFML.System.Time)">
             <summary>
             Hides the widget by making it leave with an animation
             </summary>
             <param name="type">Type of the animation</param>
             <param name="duration">Duration of the animation</param>
             <remarks>
             If the widget is already hidden then the animation will still play but you will not see it.
            
             During the animation the position, size and/or opacity may change. Once the animation is done the widget will
             be back in the state in which it was when this function was called, except that it will no longer be visible.
             </remarks>
        </member>
        <member name="P:TGUI.Widget.Enabled">
            <summary>
            Gets or sets whether the widget is enabled
            </summary>
        </member>
        <member name="P:TGUI.Widget.Focus">
            <summary>
            Gets or sets whether the widget currently has focus
            </summary>
            <remarks>
            When a widget is focused, the previously focused widget will be unfocused.
            Note that setting the property only works properly when the widget was already added to its parent (e.g. the Gui).
            </remarks>
        </member>
        <member name="P:TGUI.Widget.Focusable">
            <summary>
            Gets or sets whether the widget can be focused
            </summary>
            <remarks>
            By default all widgets are focusable
            </remarks>
        </member>
        <member name="P:TGUI.Widget.UserData">
            <summary>
            Gets or sets the custom data to store inside the widget
            </summary>
        </member>
        <member name="P:TGUI.Widget.WidgetType">
            <summary>
            Gets the type of the widget
            </summary>
        </member>
        <member name="P:TGUI.Widget.Parent">
            <summary>
            Gets the parent to which the widget was added
            </summary>
            <remarks>
            The setter is only intended for internal use.
            </remarks>
        </member>
        <member name="P:TGUI.Widget.AnimationPlaying">
            <summary>
            Gets whether there is an active animation (started with ShowWithEffect or HideWithEffect)
            </summary>
        </member>
        <member name="M:TGUI.Widget.MoveToFront">
            <summary>
            Places the widget before all other widgets in its parent
            </summary>
            <remarks>
            Note that this function only has an effect when the widget was already added to its parent (e.g. the Gui).
            </remarks>
        </member>
        <member name="M:TGUI.Widget.MoveToBack">
            <summary>
            Places the widget behind all other widgets in its parent
            </summary>
            <remarks>
            Note that this function only has an effect when the widget was already added to its parent (e.g. the Gui).
            </remarks>
        </member>
        <member name="P:TGUI.Widget.ToolTip">
            <summary>
            Gets or sets the tool tip that should be displayed when hovering over the widget
            </summary>
        </member>
        <member name="P:TGUI.Widget.TextSize">
            <summary>
            Gets or sets the character size of the text in this widget if it uses text
            </summary>
        </member>
        <member name="P:TGUI.Widget.Name">
            <summary>
            Gets or sets the name of a widget
            </summary>
            <remarks>
            This name is overwritten when adding the widget to its parent. You should only change it afterwards.
            </remarks>
        </member>
        <member name="M:TGUI.Widget.MouseOnWidget(SFML.System.Vector2f)">
            <summary>
            Gets whether the mouse position lies on top of the widget
            </summary>
            <param name="pos">Mouse position, relative to the parent widget</param>
            <returns>Is the mouse on top of the widget?</returns>
        </member>
        <member name="P:TGUI.Widget.ParentGui">
            <summary>
            Gets the gui to which the widget was added.
            </summary>
            <remarks>
            The setter is only intended for internal use.
            </remarks>
        </member>
        <member name="M:TGUI.Widget.SetSignalEnabled(System.String,System.Boolean)">
            <summary>
            Enables or disables certain signals (e.g. to change a property without triggering the signal)
            </summary>
            <param name="signalName">Signal that should be enabled/disabled</param>
            <param name="enabled">Whether the signal needs to be enabled or disabled</param>
        </member>
        <member name="M:TGUI.Widget.ToString">
            <summary>
            Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:TGUI.Widget.AddInternalSignal(System.UInt32)">
            <summary>
            Helper function to throw an error if connecting signal failed and store the signal
            in a list for signals that need to be disconnected when the class instance is destroyed.
            </summary>
            <param name="callbackId">Unique id of the callback</param>
        </member>
        <member name="M:TGUI.Widget.SendSignal(System.Object)">
            <summary>
            Helper function to trigger an event without parameters
            <param name="eventKey">Unique event identifier</param>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TGUI.Widget.SendSignal``1(System.Object,``0)" -->
        <member name="M:TGUI.Widget.InitSignals">
            <summary>
            Initializes the internal signals
            </summary>
        </member>
        <member name="M:TGUI.Widget.DeinitSignals">
            <summary>
            Disconnects the internal signals
            </summary>
        </member>
        <member name="E:TGUI.Widget.PositionChanged">
            <summary>Event handler for the Clicked signal</summary>
        </member>
        <member name="E:TGUI.Widget.SizeChanged">
            <summary>Event handler for the Clicked signal</summary>
        </member>
        <member name="E:TGUI.Widget.MouseEntered">
            <summary>Event handler for the MouseEntered signal</summary>
        </member>
        <member name="E:TGUI.Widget.MouseLeft">
            <summary>Event handler for the MouseLeft signal</summary>
        </member>
        <member name="E:TGUI.Widget.Focused">
            <summary>Event handler for the Focused signal</summary>
        </member>
        <member name="E:TGUI.Widget.Unfocused">
            <summary>Event handler for the Unfocused signal</summary>
        </member>
        <member name="E:TGUI.Widget.AnimationFinished">
            <summary>Event handler for the AnimationFinished signal</summary>
        </member>
        <member name="T:TGUI.BitmapButton">
            <summary>
            Bitmap button widget
            </summary>
        </member>
        <member name="M:TGUI.BitmapButton.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="text">Caption of the button</param>
        </member>
        <member name="M:TGUI.BitmapButton.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.BitmapButton.#ctor(TGUI.BitmapButton)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.BitmapButton.Image">
            <summary>
            Gets or sets the image that should be displayed next to the text
            </summary>
        </member>
        <member name="P:TGUI.BitmapButton.ImageScaling">
            <summary>
            Gets or sets the relative size of the image to display next to the text
            </summary>
            <remarks>
            The value lies between 0 and 1 and determines the height of the image compared to the button height.
            If set to 0 (default), the image will always have its original size, no matter what the button size is.
            </remarks>
        </member>
        <member name="T:TGUI.Button">
            <summary>
            Button widget
            </summary>
        </member>
        <member name="M:TGUI.Button.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="text">Caption of the button</param>
        </member>
        <member name="M:TGUI.Button.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.Button.#ctor(TGUI.Button)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.Button.Renderer">
            <summary>
            Gets or sets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
            <remarks>
            After retrieving the renderer, the widget has its own copy of the renderer and it will no longer be shared.
            </remarks>
        </member>
        <member name="P:TGUI.Button.SharedRenderer">
            <summary>
            Gets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
        </member>
        <member name="P:TGUI.Button.Text">
            <summary>
            Gets or sets the caption displayed on the button
            </summary>
        </member>
        <member name="M:TGUI.Button.InitSignals">
            <summary>
            Initializes the signals
            </summary>
        </member>
        <member name="E:TGUI.Button.Pressed">
            <summary>Event handler for the Pressed signal</summary>
        </member>
        <member name="T:TGUI.Canvas">
            <summary>
            Canvas widget
            </summary>
        </member>
        <member name="M:TGUI.Canvas.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.Canvas.#ctor(SFML.System.Vector2f)">
            <summary>
            Constructor to create the Canvas with the given size
            </summary>
            <param name="size">Size of the canvas</param>
        </member>
        <member name="M:TGUI.Canvas.#ctor(System.Single,System.Single)">
            <summary>
            Constructor to create the Canvas with the given size
            </summary>
            <param name="width">Width of the canvas</param>
            <param name="height">Height of the canvas</param>
        </member>
        <member name="M:TGUI.Canvas.#ctor(TGUI.Canvas)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="P:TGUI.Canvas.View">
            <summary>
            Change the current active view
            </summary>
            <param name="view">New view</param>
        </member>
        <member name="P:TGUI.Canvas.DefaultView">
            <summary>
            Default view of the canvas
            </summary>
        </member>
        <member name="P:TGUI.Canvas.Viewport">
            <summary>
            Get the viewport of the currently applied view
            </summary>
        </member>
        <member name="M:TGUI.Canvas.Clear">
            <summary>
            Clear the entire canvas with black color
            </summary>
        </member>
        <member name="M:TGUI.Canvas.Clear(SFML.Graphics.Color)">
            <summary>
            Clear the entire canvas with a single color
            </summary>
            <param name="color">Color to use to clear the canvas</param>
        </member>
        <member name="M:TGUI.Canvas.Draw(SFML.Graphics.Drawable)">
            <summary>
            Draw something to the canvas, with default render states
            </summary>
            <param name="drawable">Object to draw</param>
        </member>
        <member name="M:TGUI.Canvas.Draw(SFML.Graphics.Drawable,SFML.Graphics.RenderStates)">
            <summary>
            Draw something to the canvas
            </summary>
            <param name="drawable">Object to draw</param>
            <param name="states">Render states to use for drawing</param>
        </member>
        <member name="M:TGUI.Canvas.Draw(SFML.Graphics.Vertex[],SFML.Graphics.PrimitiveType)">
            <summary>
            Draw primitives defined by an array of vertices, with default render states
            </summary>
            <param name="vertices">Pointer to the vertices</param>
            <param name="type">Type of primitives to draw</param>
        </member>
        <member name="M:TGUI.Canvas.Draw(SFML.Graphics.Vertex[],SFML.Graphics.PrimitiveType,SFML.Graphics.RenderStates)">
            <summary>
            Draw primitives defined by an array of vertices
            </summary>
            <param name="vertices">Pointer to the vertices</param>
            <param name="type">Type of primitives to draw</param>
            <param name="states">Render states to use for drawing</param>
        </member>
        <member name="M:TGUI.Canvas.Draw(SFML.Graphics.Vertex[],System.UInt32,System.UInt32,SFML.Graphics.PrimitiveType)">
            <summary>
            Draw primitives defined by a sub-array of vertices, with default render states
            </summary>
            <param name="vertices">Array of vertices to draw</param>
            <param name="start">Index of the first vertex to draw in the array</param>
            <param name="count">Number of vertices to draw</param>
            <param name="type">Type of primitives to draw</param>
        </member>
        <member name="M:TGUI.Canvas.Draw(SFML.Graphics.Vertex[],System.UInt32,System.UInt32,SFML.Graphics.PrimitiveType,SFML.Graphics.RenderStates)">
            <summary>
            Draw primitives defined by a sub-array of vertices
            </summary>
            <param name="vertices">Pointer to the vertices</param>
            <param name="start">Index of the first vertex to use in the array</param>
            <param name="count">Number of vertices to draw</param>
            <param name="type">Type of primitives to draw</param>
            <param name="states">Render states to use for drawing</param>
        </member>
        <member name="M:TGUI.Canvas.Display">
            <summary>
            Update the contents of the canvas
            </summary>
        </member>
        <member name="M:TGUI.Canvas.OnSizeChanged(SFML.System.Vector2f)">
            <summary>
            Function called when widget size changes
            </summary>
            <param name="size">New size of the widget</param>
        </member>
        <member name="M:TGUI.Canvas.OnMouseOnWidget(SFML.System.Vector2f)">
            <summary>
            Function called when the widget wants to know if the mouse is on top of it
            </summary>
            <param name="pos">Mouse position relative to the parent of the widget</param>
            <returns>Whether the mouse is on top of the widget</returns>
        </member>
        <member name="M:TGUI.Canvas.OnRendererChanged(System.String)">
            <summary>
            Function called when a renderer property changes
            </summary>
            <param name="property">Property that was changed</param>
            <returns>
            True if the change has been fully processed, false when the
            base class should also be informed about the change.
            </returns>
        </member>
        <member name="M:TGUI.Canvas.OnDraw(SFML.Graphics.RenderStates)">
            <summary>
            Function called when widget should draw itself
            </summary>
            <param name="states">States for drawing</param>
        </member>
        <member name="T:TGUI.ChatBox">
            <summary>
            Chat box widget
            </summary>
        </member>
        <member name="M:TGUI.ChatBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.ChatBox.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.ChatBox.#ctor(TGUI.ChatBox)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.ChatBox.Renderer">
            <summary>
            Gets or sets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
            <remarks>
            After retrieving the renderer, the widget has its own copy of the renderer and it will no longer be shared.
            </remarks>
        </member>
        <member name="P:TGUI.ChatBox.SharedRenderer">
            <summary>
            Gets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
        </member>
        <member name="M:TGUI.ChatBox.AddLine(System.String)">
             <summary>
             Adds a new line of text to the chat box
             </summary>
             <remarks>
             The whole text passed to this function will be considered as one line for the getLine and removeLine functions,
             even if it is too long and gets split over multiple lines.
            
             The default text color and style will be used.
             </remarks>
             <param name="text">Text that will be added to the chat box</param>
        </member>
        <member name="M:TGUI.ChatBox.AddLine(System.String,SFML.Graphics.Color)">
             <summary>
             Adds a new line of text to the chat box
             </summary>
             <remarks>
             The whole text passed to this function will be considered as one line for the getLine and removeLine functions,
             even if it is too long and gets split over multiple lines.
            
             The default text style will be used.
             </remarks>
             <param name="text">Text that will be added to the chat box</param>
             <param name="color">Color of the text</param>
        </member>
        <member name="M:TGUI.ChatBox.AddLine(System.String,SFML.Graphics.Color,SFML.Graphics.Text.Styles)">
            <summary>
            Adds a new line of text to the chat box
            </summary>
            <remarks>
            The whole text passed to this function will be considered as one line for the getLine and removeLine functions,
            even if it is too long and gets split over multiple lines.
            </remarks>
            <param name="text">Text that will be added to the chat box</param>
            <param name="color">Color of the text</param>
            <param name="style">Text style</param>
        </member>
        <member name="M:TGUI.ChatBox.GetLine(System.UInt32)">
            <summary>
            Returns the contents of the requested line
            </summary>
            <param name="lineIndex">The index of the line of which you request the contents. The first line has index 0.</param>
            <returns>
            The contents of the requested line. An empty string will be returned when the index is too high.
            </returns>
        </member>
        <member name="M:TGUI.ChatBox.GetLineColor(System.UInt32)">
            <summary>
            Returns the color of the requested line
            </summary>
            <param name="lineIndex">The index of the line of which you request the color. The first line has index 0.</param>
            <returns>
            The color of the requested line. The default color (set with setTextColor) when the index is too high.
            </returns>
        </member>
        <member name="M:TGUI.ChatBox.GetLineTextStyle(System.UInt32)">
            <summary>
            Returns the text style of the requested line
            </summary>
            <param name="lineIndex">The index of the line of which you request the text style. The first line has index 0.</param>
            <returns>
            The text style of the requested line. The default style (set with setTextStyle) when the index is too high.
            </returns>
        </member>
        <member name="M:TGUI.ChatBox.RemoveLine(System.UInt32)">
            <summary>
            Removes the requested line
            </summary>
            <param name="lineIndex">The index of the line that should be removed. The first line has index 0.</param>
            <returns>
            True if the line was removed, false if no such line existed (index too high)
            </returns>
        </member>
        <member name="M:TGUI.ChatBox.RemoveAllLines">
            <summary>
            Removes all lines from the chat box
            </summary>
        </member>
        <member name="M:TGUI.ChatBox.GetLineAmount">
            <summary>
            Returns the amount of lines in the chat box
            </summary>
            <returns>
            Number of lines in the chat box
            </returns>
        </member>
        <member name="P:TGUI.ChatBox.LineLimit">
            <summary>
            Sets a maximum amount of lines in the chat box
            </summary>
            <remarks>
            Only the last maxLines lines will be kept. Lines above those will be removed.
            Set to 0 to disable the line limit (default).
            </remarks>
        </member>
        <member name="P:TGUI.ChatBox.TextColor">
            <summary>
            Gets or sets the default text color
            </summary>
        </member>
        <member name="P:TGUI.ChatBox.TextStyle">
            <summary>
            Gets or sets the default text style
            </summary>
        </member>
        <member name="P:TGUI.ChatBox.LinesStartFromTop">
            <summary>
            Gets or sets whether the first lines start from the top or from the bottom of the chat box
            </summary>
            <remarks>
            Note that this only makes a difference when the lines don't fill the entire chat box.
            This does not change the order of the lines.
            </remarks>
        </member>
        <member name="P:TGUI.ChatBox.NewLinesBelowOthers">
            <summary>
            Gets or sets whehter new lines are added below the other lines or above them
            </summary>
            <remarks>
            By default the new lines are always added below the others.
            </remarks>
        </member>
        <member name="P:TGUI.ChatBox.ScrollbarValue">
            <summary>
            Gets or sets the thumb position of the scrollbar
            </summary>
        </member>
        <member name="T:TGUI.CheckBox">
            <summary>
            Check box widget
            </summary>
        </member>
        <member name="M:TGUI.CheckBox.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="text">The text to display next to the check box</param>
        </member>
        <member name="M:TGUI.CheckBox.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.CheckBox.#ctor(TGUI.CheckBox)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="T:TGUI.ChildWindow">
            <summary>
            Child window widget
            </summary>
        </member>
        <member name="T:TGUI.ChildWindow.TitleButton">
            <summary>
            Buttons that can be displayed in the title bar
            </summary>
        </member>
        <member name="F:TGUI.ChildWindow.TitleButton.None">
            <summary>Display no buttons</summary>
        </member>
        <member name="F:TGUI.ChildWindow.TitleButton.Close">
            <summary>Display the close button</summary>
        </member>
        <member name="F:TGUI.ChildWindow.TitleButton.Maximize">
            <summary>Display the maximize button</summary>
        </member>
        <member name="F:TGUI.ChildWindow.TitleButton.Minimize">
            <summary>Display the minimize button</summary>
        </member>
        <member name="M:TGUI.ChildWindow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.ChildWindow.#ctor(System.String,TGUI.ChildWindow.TitleButton)">
            <summary>
            Constructor to create the ChildWindow with the given title and title buttons
            </summary>
            <param name="title">Title to display in the title bar</param>
            <param name="titleButtons">Buttons to display in the title bar</param>
        </member>
        <member name="M:TGUI.ChildWindow.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
        </member>
        <member name="M:TGUI.ChildWindow.#ctor(TGUI.ChildWindow)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="P:TGUI.ChildWindow.Renderer">
            <summary>
            Gets or sets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
            <remarks>
            After retrieving the renderer, the widget has its own copy of the renderer and it will no longer be shared.
            </remarks>
        </member>
        <member name="P:TGUI.ChildWindow.SharedRenderer">
            <summary>
            Gets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
        </member>
        <member name="P:TGUI.ChildWindow.MinimumSize">
            <summary>
            Gets or sets the minimum size of the child window
            </summary>
            <remarks>
            The given minimum size excludes the borders and titlebar.
            If the window is smaller than the minimum size, it will automatically be enlarged.
            </remarks>
        </member>
        <member name="P:TGUI.ChildWindow.MaximumSize">
            <summary>
            Gets or sets the maximum size of the child window
            </summary>
            <remarks>
            The given maximum size excludes the borders and titlebar.
            If the window is larger than the maximum size, it will automatically be shrunk.
            </remarks>
        </member>
        <member name="P:TGUI.ChildWindow.Title">
            <summary>
            Gets or sets the title that is displayed in the title bar of the child window
            </summary>
        </member>
        <member name="P:TGUI.ChildWindow.TitleTextSize">
            <summary>
            Gets or sets the character size of the title
            </summary>
            <remarks>
            If the size is set to 0 then the character size is determined by the height of the title bar.
            </remarks>
        </member>
        <member name="P:TGUI.ChildWindow.TitleAlignment">
            <summary>
            Gets or sets the title alignment
            </summary>
        </member>
        <member name="P:TGUI.ChildWindow.TitleButtons">
            <summary>
            Gets or sets the title buttons that are shown in the title bar
            </summary>
            <remarks>
            By default ChildWindows only display a close button.
            </remarks>
            <example>
            The following example gives the ChildWindow both a minimize and close button.
            <code>
            childWindow.SetTitleButtons(ChildWindow.TitleButton.Minimize | ChildWindow.TitleButton.Close);
            </code>
            </example>
        </member>
        <member name="P:TGUI.ChildWindow.Resizable">
            <summary>
            Gets or sets whether the child window can be resized by dragging its borders or not
            </summary>
        </member>
        <member name="P:TGUI.ChildWindow.KeepInParent">
            <summary>
            Gets or sets whether the child window is to be kept inside its parent
            </summary>
            <remarks>
            When it's set to true, it will not be possible to move the window outside its parent, not even partially.
            It's set to false by default.
            </remarks>
        </member>
        <member name="P:TGUI.ChildWindow.PositionLocked">
            <summary>
            Gets or sets whether the child window can be moved by dragging its title bar or not
            </summary>
            <remarks>
            Locking the position only affects user interaction, the setPosition function will still move the window.
            </remarks>
        </member>
        <member name="M:TGUI.ChildWindow.CloseWindow">
            <summary>
            Try to close the window
            </summary>
            <remarks>
            This will trigger the Closed signal. If no callback is requested then the window will be closed.
            </remarks>
        </member>
        <member name="M:TGUI.ChildWindow.InitSignals">
            <summary>
            Initializes the signals
            </summary>
        </member>
        <member name="E:TGUI.ChildWindow.MousePressed">
            <summary>Event handler for the MousePressed signal</summary>
        </member>
        <member name="E:TGUI.ChildWindow.Closed">
            <summary>Event handler for the Closed signal</summary>
        </member>
        <member name="E:TGUI.ChildWindow.Maximized">
            <summary>Event handler for the Maximized signal</summary>
        </member>
        <member name="E:TGUI.ChildWindow.Minimized">
            <summary>Event handler for the Minimized signal</summary>
        </member>
        <member name="E:TGUI.ChildWindow.EscapeKeyPressed">
            <summary>Event handler for the EscapeKeyPressed signal</summary>
        </member>
        <member name="T:TGUI.ClickableWidget">
            <summary>
            Clickable widget
            </summary>
        </member>
        <member name="M:TGUI.ClickableWidget.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.ClickableWidget.#ctor(SFML.System.Vector2f)">
            <summary>
            Constructor to create the widget with a given size
            </summary>
            <param name="size">Initial size of the widget</param>
        </member>
        <member name="M:TGUI.ClickableWidget.#ctor(System.Single,System.Single)">
            <summary>
            Constructor to create the widget with a given size
            </summary>
            <param name="width">Initial width of the widget</param>
            <param name="height">Initial height of the widget</param>
        </member>
        <member name="M:TGUI.ClickableWidget.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.ClickableWidget.#ctor(TGUI.ClickableWidget)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="M:TGUI.ClickableWidget.InitSignals">
            <summary>
            Initializes the signals
            </summary>
        </member>
        <member name="E:TGUI.ClickableWidget.MousePressed">
            <summary>Event handler for the MousePressed signal</summary>
        </member>
        <member name="E:TGUI.ClickableWidget.MouseReleased">
            <summary>Event handler for the MouseReleased signal</summary>
        </member>
        <member name="E:TGUI.ClickableWidget.Clicked">
            <summary>Event handler for the Clicked signal</summary>
        </member>
        <member name="E:TGUI.ClickableWidget.RightMousePressed">
            <summary>Event handler for the RightMousePressed signal</summary>
        </member>
        <member name="E:TGUI.ClickableWidget.RightMouseReleased">
            <summary>Event handler for the RightMouseReleased signal</summary>
        </member>
        <member name="E:TGUI.ClickableWidget.RightClicked">
            <summary>Event handler for the RightClicked signal</summary>
        </member>
        <member name="E:TGUI.ComboBox.ItemSelected">
            <summary>Event handler for the ItemSelected signal</summary>
        </member>
        <member name="T:TGUI.CustomWidget">
            <summary>
            Base class for widgets implemented in C#
            </summary>
        </member>
        <member name="M:TGUI.CustomWidget.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.CustomWidget.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
        </member>
        <member name="M:TGUI.CustomWidget.#ctor(TGUI.CustomWidget)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:TGUI.CustomWidget.OnPositionChanged(SFML.System.Vector2f)">
            <summary>
            Function called when widget position changes
            </summary>
            <param name="position">New position of the widget</param>
        </member>
        <member name="M:TGUI.CustomWidget.OnSizeChanged(SFML.System.Vector2f)">
            <summary>
            Function called when widget size changes
            </summary>
            <param name="size">New size of the widget</param>
        </member>
        <member name="M:TGUI.CustomWidget.OnVisibleChanged(System.Boolean)">
            <summary>
            Function called when widget visibility changes
            </summary>
            <param name="visible">Whether the widget is now shown or hidden</param>
        </member>
        <member name="M:TGUI.CustomWidget.OnEnableChanged(System.Boolean)">
            <summary>
            Function called when widget is enabled or disabled
            </summary>
            <param name="enabled">Whether the widget is now enabled or disabled</param>
        </member>
        <member name="M:TGUI.CustomWidget.OnFocusChanged(System.Boolean)">
            <summary>
            Function called when widget is focused or unfocused
            </summary>
            <param name="focused">Whether the widget is now focused or unfocused</param>
        </member>
        <member name="M:TGUI.CustomWidget.OnCanGainFocus">
            <summary>
            Function called when the widget wants to know if it can be focused
            </summary>
            <returns>Whether this type of widget can receive focus</returns>
        </member>
        <member name="M:TGUI.CustomWidget.OnGetFullSize">
            <summary>
            Function called when the widget wants to know its entire size,
            including things like borders that would be drawn around it.
            </summary>
            <returns>Full size of the widget</returns>
        </member>
        <member name="M:TGUI.CustomWidget.OnGetAbsolutePosition">
            <summary>
            Function called when the widget wants to know its position in the gui
            instead of just the relative position to its parent.
            </summary>
            <returns>Absolute position of the widget</returns>
        </member>
        <member name="M:TGUI.CustomWidget.OnGetWidgetOffset">
            <summary>
            Function called when the widget wants to know the distance between the position where
            the widget is drawn and where the widget is placed.
            </summary>
            <returns>Offset of the widget</returns>
        </member>
        <member name="M:TGUI.CustomWidget.OnUpdate(SFML.System.Time)">
            <summary>
            Function called before drawing to inform the widget how much time has passed since the last draw
            </summary>
            <param name="elapsedTime">Time elapsed since last update</param>
        </member>
        <member name="M:TGUI.CustomWidget.OnMouseOnWidget(SFML.System.Vector2f)">
            <summary>
            Function called when the widget wants to know if the mouse is on top of it
            </summary>
            <param name="pos">Mouse position relative to the parent of the widget</param>
            <returns>Whether the mouse is on top of the widget</returns>
        </member>
        <member name="M:TGUI.CustomWidget.OnLeftMousePressed(SFML.System.Vector2f)">
            <summary>
            Function called when the left mouse button was pressed on top of the widget
            </summary>
            <param name="pos">Mouse position relative to the parent of the widget</param>
        </member>
        <member name="M:TGUI.CustomWidget.OnLeftMouseReleased(SFML.System.Vector2f)">
            <summary>
            Function called when the left mouse button was released on top of the widget
            </summary>
            <param name="pos">Mouse position relative to the parent of the widget</param>
        </member>
        <member name="M:TGUI.CustomWidget.OnRightMousePressed(SFML.System.Vector2f)">
            <summary>
            Function called when the right mouse button was pressed on top of the widget
            </summary>
            <param name="pos">Mouse position relative to the parent of the widget</param>
        </member>
        <member name="M:TGUI.CustomWidget.OnRightMouseReleased(SFML.System.Vector2f)">
            <summary>
            Function called when the right mouse button was released on top of the widget
            </summary>
            <param name="pos">Mouse position relative to the parent of the widget</param>
        </member>
        <member name="M:TGUI.CustomWidget.OnMouseMoved(SFML.System.Vector2f)">
            <summary>
            Function called when the mouse moved (while the mouse is on top of the widget)
            </summary>
            <param name="pos">Mouse position relative to the parent of the widget</param>
        </member>
        <member name="M:TGUI.CustomWidget.OnKeyPressed(SFML.Window.KeyEvent)">
            <summary>
            Function called when a key was pressed while the widget was focused
            </summary>
            <param name="keyEvent">Event containing the pressed key and the state of the modifier keys</param>
        </member>
        <member name="M:TGUI.CustomWidget.OnTextEntered(System.UInt32)">
            <summary>
            Function called when a character was typed while the widget was focused
            </summary>
            <param name="key">UTF-32 Unicode value of the character</param>
        </member>
        <member name="M:TGUI.CustomWidget.OnMouseWheelScrolled(System.Single,SFML.System.Vector2f)">
            <summary>
            Function called when the mouse wheel is moved while the mouse is on top of the widget
            </summary>
            <param name="delta">Scroll amount, positive when scrolling up, negative when scrolling down</param>
            <param name="mousePos">Mouse position relative to the parent of the widget</param>
            <returns>Whether the event was handled by the widget</returns>
        </member>
        <member name="M:TGUI.CustomWidget.OnMouseNoLongerOnWidget">
            <summary>
            Function called when the mouse is no longer on top of the widget
            </summary>
        </member>
        <member name="M:TGUI.CustomWidget.OnLeftMouseButtonNoLongerDown">
            <summary>
            Function called when the left mouse button was released (not necessarily on top of the widget) after it was pressed on the widget
            </summary>
        </member>
        <member name="M:TGUI.CustomWidget.OnMouseEnteredWidget">
            <summary>
            Function called when the mouse is now on top of the button
            </summary>
        </member>
        <member name="M:TGUI.CustomWidget.OnMouseLeftWidget">
            <summary>
            Function called when the mouse is no longer on top of the widget
            </summary>
        </member>
        <member name="M:TGUI.CustomWidget.OnRendererChanged(System.String)">
            <summary>
            Function called when a renderer property changes
            </summary>
            <param name="property">Property that was changed</param>
            <returns>
            True if the change has been fully processed, false when the
            base class should also be informed about the change.
            </returns>
        </member>
        <member name="M:TGUI.CustomWidget.OnDraw(SFML.Graphics.RenderStates)">
            <summary>
            Function called when widget should draw itself
            </summary>
            <param name="states">States for drawing</param>
            <remarks>
            The render target to draw on can be found at myParentGui.Target
            </remarks>
        </member>
        <member name="T:TGUI.EditBox">
            <summary>
            Edit box widget
            </summary>
        </member>
        <member name="F:TGUI.EditBox.ValidatorAll">
            <summary>Validator for the InputValidator property to accept all input (default)</summary>
        </member>
        <member name="F:TGUI.EditBox.ValidatorInt">
            <summary>Validator for the InputValidator property to only accept integers</summary>
        </member>
        <member name="F:TGUI.EditBox.ValidatorUInt">
            <summary>Validator for the InputValidator property to only accept unsigned integers</summary>
        </member>
        <member name="F:TGUI.EditBox.ValidatorFloat">
            <summary>Validator for the InputValidator property to only accept numbers</summary>
        </member>
        <member name="M:TGUI.EditBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.EditBox.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.EditBox.#ctor(TGUI.EditBox)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.EditBox.Renderer">
            <summary>
            Gets or sets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
            <remarks>
            After retrieving the renderer, the widget has its own copy of the renderer and it will no longer be shared.
            </remarks>
        </member>
        <member name="P:TGUI.EditBox.SharedRenderer">
            <summary>
            Gets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
        </member>
        <member name="P:TGUI.EditBox.Text">
            <summary>
            Gets or sets the text of the editbox
            </summary>
            <remarks>
            The last characters of the text might be removed in the following situations:
            - You have set a character limit and this text contains too much characters.
            - You have limited the text width and the text does not fit inside the EditBox.
            </remarks>
        </member>
        <member name="P:TGUI.EditBox.DefaultText">
            <summary>
            Gets or sets the default text of the editbox. This is the text drawn when the edit box is empty.
            </summary>
            <remarks>
            This text is not affected by the password character.
            </remarks>
        </member>
        <member name="M:TGUI.EditBox.SetSelectedText(System.UInt32,System.UInt32)">
            <summary>
            Selects text in the edit box
            </summary>
            <param name="start">The index of the first character to select</param>
            <param name="length">Amount of character to select</param>
        </member>
        <member name="P:TGUI.EditBox.SelectedText">
            <summary>
            Gets the currently selected text (not affected by the password character)
            </summary>
        </member>
        <member name="P:TGUI.EditBox.PasswordCharacter">
            <summary>
            Gets or sets the password character (0 to not use a password character, default)
            </summary>
        </member>
        <member name="P:TGUI.EditBox.MaximumCharacters">
            <summary>
            Gets or sets the character limit (0 to disable, default)
            </summary>
        </member>
        <member name="P:TGUI.EditBox.Alignment">
            <summary>
            Gets or sets the text alignment
            </summary>
        </member>
        <member name="P:TGUI.EditBox.LimitTextWidth">
            <summary>
            Gets or sets whether the text width is limited or whether you are able to type even if the edit box is full
            </summary>
        </member>
        <member name="P:TGUI.EditBox.ReadOnly">
            <summary>
            Gets or sets whether the text box is read-only
            </summary>
            <remarks>
            When the edit box is read-only, you can no longer delete characters and type text.
            Selecting text, copying text and even calling the setText function will still work.
            </remarks>
        </member>
        <member name="P:TGUI.EditBox.CaretPosition">
            <summary>
            Gets or sets after which character the blinking cursor is located
            </summary>
        </member>
        <member name="P:TGUI.EditBox.InputValidator">
            <summary>
            Gets or sets the regex used to decide whether the entered text is accepted or dropped
            </summary>
            <remarks>
            When the regex does not match when calling the setText function then the edit box contents will be cleared.
            When it does not match when the user types a character in the edit box, then the input character is rejected.
            </remarks>
            <example>
            <code>
            editBox.InputValidator = EditBox.ValidatorInt;
            editBox.InputValidator = "[a-zA-Z][a-zA-Z0-9]*";
            </code>
            </example>
        </member>
        <member name="P:TGUI.EditBox.Suffix">
            <summary>
            Gets or sets a suffix displayed at the right side of the edit box
            </summary>
        </member>
        <member name="M:TGUI.EditBox.InitSignals">
            <summary>
            Initializes the signals
            </summary>
        </member>
        <member name="E:TGUI.EditBox.TextChanged">
            <summary>Event handler for the TextChanged signal</summary>
        </member>
        <member name="E:TGUI.EditBox.ReturnKeyPressed">
            <summary>Event handler for the ReturnKeyPressed signal</summary>
        </member>
        <member name="T:TGUI.Group">
            <summary>
            Group widget
            </summary>
        </member>
        <member name="M:TGUI.Group.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.Group.#ctor(SFML.System.Vector2f)">
            <summary>
            Constructor to create the group with a given size
            </summary>
            <param name="size">Initial size of the group</param>
        </member>
        <member name="M:TGUI.Group.#ctor(System.Single,System.Single)">
            <summary>
            Constructor to create the group with a given size
            </summary>
            <param name="width">Initial width of the group</param>
            <param name="height">Initial height of the group</param>
        </member>
        <member name="M:TGUI.Group.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.Group.#ctor(TGUI.Group)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.Group.Renderer">
            <summary>
            Gets or sets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
            <remarks>
            After retrieving the renderer, the widget has its own copy of the renderer and it will no longer be shared.
            </remarks>
        </member>
        <member name="P:TGUI.Group.SharedRenderer">
            <summary>
            Gets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
        </member>
        <member name="T:TGUI.HorizontalLayout">
            <summary>
            Horizontal layout widget
            </summary>
        </member>
        <member name="M:TGUI.HorizontalLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.HorizontalLayout.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.HorizontalLayout.#ctor(TGUI.HorizontalLayout)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="T:TGUI.HorizontalWrap">
            <summary>
            Horizontal wrap widget
            </summary>
        </member>
        <member name="M:TGUI.HorizontalWrap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.HorizontalWrap.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.HorizontalWrap.#ctor(TGUI.HorizontalWrap)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="E:TGUI.Knob.ValueChanged">
            <summary>Event handler for the ValueChanged signal</summary>
        </member>
        <member name="T:TGUI.Label">
            <summary>
            Label widget
            </summary>
        </member>
        <member name="M:TGUI.Label.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="text">Text of the label</param>
        </member>
        <member name="M:TGUI.Label.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.Label.#ctor(TGUI.Button)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.Label.Renderer">
            <summary>
            Gets or sets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
            <remarks>
            After retrieving the renderer, the widget has its own copy of the renderer and it will no longer be shared.
            </remarks>
        </member>
        <member name="P:TGUI.Label.SharedRenderer">
            <summary>
            Gets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
        </member>
        <member name="P:TGUI.Label.Text">
            <summary>
            Gets or sets the text of the label
            </summary>
            <remarks>
            When the text is auto-sized (default), then the size of the label will be changed to fit the whole text.
            </remarks>
        </member>
        <member name="P:TGUI.Label.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal text alignment
            </summary>
            <remarks>
            By default the text is aligned to the left.
            </remarks>
        </member>
        <member name="P:TGUI.Label.VerticalAlignmentAlignment">
            <summary>
            Gets or sets the vertical text alignment
            </summary>
            <remarks>
            By default the text is aligned to the top.
            </remarks>
        </member>
        <member name="P:TGUI.Label.AutoSize">
             <summary>
             Gets or sets whether the label is auto-sized or not
             </summary>
             <remarks>
             When the label is in auto-size mode, the width and height of the label will be changed to fit the text.
             Otherwise, only the part defined by the size will be visible.
            
             The label is auto-sized by default.
             </remarks>
        </member>
        <member name="P:TGUI.Label.MaximumTextWidth">
             <summary>
             Gets or sets the maximum width that the text will have when auto-sizing
             </summary>
             <remarks>
             This property is ignored when an exact size has been given.
             Pass 0 to this function to disable the maximum.
            
             When the text is auto-sizing then the text will be split over several lines when its width would exceed the
             value passed to this function.
             </remarks>
        </member>
        <member name="P:TGUI.Label.IgnoreMouseEvents">
            <summary>
            Gets or sets whether the widget should completely ignore mouse events and let them pass to the widgets behind it
            </summary>
        </member>
        <member name="P:TGUI.Label.ScrollbarPolicy">
            <summary>
            Gets or sets when the vertical scrollbar should be displayed
            </summary>
        </member>
        <member name="M:TGUI.Label.InitSignals">
            <summary>
            Initializes the signals
            </summary>
        </member>
        <member name="E:TGUI.Label.DoubleClicked">
            <summary>Event handler for the DoubleClicked signal</summary>
        </member>
        <member name="T:TGUI.ListBox">
            <summary>
            List box widget
            </summary>
        </member>
        <member name="M:TGUI.ListBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.ListBox.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.ListBox.#ctor(TGUI.ListBox)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.ListBox.Renderer">
            <summary>
            Gets or sets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
            <remarks>
            After retrieving the renderer, the widget has its own copy of the renderer and it will no longer be shared.
            </remarks>
        </member>
        <member name="P:TGUI.ListBox.SharedRenderer">
            <summary>
            Gets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
        </member>
        <member name="M:TGUI.ListBox.AddItem(System.String,System.String)">
            <summary>
            Adds an item to the list
            </summary>
            <param name="item">The name of the item you want to add (this is the text that will be displayed inside the list box)</param>
            <param name="id">Optional unique id given to this item for the purpose to later identifying this item</param>
            <returns>
            - true when the item was successfully added
            - false when the list box is full (you have set a maximum item limit and you are trying to add more items)
            - false when there is no scrollbar and you try to have more items than fit inside the list box
            </returns>
        </member>
        <member name="M:TGUI.ListBox.SetSelectedItem(System.String)">
            <summary>
            Selects an item in the list box
            </summary>
            <param name="item">The item you want to select</param>
            <returns>
            - true on success
            - false when none of the items matches the name
            </returns>
            <remarks>
            In case the id would not be unique, the first item with that id will be selected.
            </remarks>
        </member>
        <member name="M:TGUI.ListBox.SetSelectedItemById(System.String)">
            <summary>
            Selects an item in the list box
            </summary>
            <param name="id">Unique id passed to AddItem</param>
            <returns>
            - true on success
            - false when none of the items has the given id
            </returns>
            <remarks>
            In case the names are not unique, the first item with that name will be selected.
            </remarks>
        </member>
        <member name="M:TGUI.ListBox.SetSelectedItemByIndex(System.UInt32)">
            <summary>
            Selects an item in the list box
            </summary>
            <param name="index">Index of the item in the list box</param>
            <returns>
            - true on success
            - false when the index was too high
            </returns>
        </member>
        <member name="M:TGUI.ListBox.DeselectItem">
            <summary>
            Deselects the selected item
            </summary>
        </member>
        <member name="M:TGUI.ListBox.RemoveItem(System.String)">
            <summary>
            Removes the item from the list with the given name
            </summary>
            <param name="item">The item to remove</param>
            <returns>
            - true when the item was removed
            - false when the name did not match any item
            </returns>
            <remarks>
            In case the names are not unique, only the first item with that name will be removed.
            </remarks>
        </member>
        <member name="M:TGUI.ListBox.RemoveItemById(System.String)">
            <summary>
            Removes the item that were added with the given id
            </summary>
            <param name="id">Id that was given to the AddItem function</param>
            <returns>
            - true when the item was removed
            - false when there was no item with the given id
            </returns>
            <remarks>
            In case the id is not unique, only the first item with that id will be removed.
            </remarks>
        </member>
        <member name="M:TGUI.ListBox.RemoveItemByIndex(System.UInt32)">
            <summary>
            Removes the item from the list box
            </summary>
            <param name="index">Index of the item in the list box</param>
            <returns>
            - true when the item was removed
            - false when the index was too high
            </returns>
        </member>
        <member name="M:TGUI.ListBox.RemoveAllItems">
            <summary>
            Removes all items from the list
            </summary>
        </member>
        <member name="M:TGUI.ListBox.GetItemById(System.String)">
            <summary>
            Returns the item name of the item with the given id
            </summary>
            <param name="id">The id of the item that was given to it when it was added</param>
            <returns>The requested item, or an empty string when no item matches the id</returns>
            <remarks>
            In case the id is not unique, the first item with that id will be returned.
            </remarks>
        </member>
        <member name="M:TGUI.ListBox.GetItemByIndex(System.UInt32)">
            <summary>
            Returns the item name of the item at the given index
            </summary>
            <param name="index">The index of the item to return</param>
            <returns>The requested item, or an empty string when the index was too high</returns>
        </member>
        <member name="M:TGUI.ListBox.GetIndexById(System.String)">
            <summary>
            Returns the index of the item with the given id
            </summary>
            <param name="index">The id of the item that was given to it when it was added</param>
            <returns>The index of the item that matched the id, or -1 when no item matches the id</returns>
            <remarks>In case the id is not unique, the index of the first item with that id will be returned.</remarks>
        </member>
        <member name="M:TGUI.ListBox.GetIdByIndex(System.UInt32)">
            <summary>
            Returns the id of the item at the given index
            </summary>
            <param name="index">The index of the item to find</param>
            <returns>The id of the requested item, or an empty string when the index was too high</returns>
        </member>
        <member name="M:TGUI.ListBox.GetSelectedItem">
            <summary>
            Returns the currently selected item
            </summary>
            <returns>
            The selected item.
            When no item was selected then this function will return an empty string.
            </returns>
        </member>
        <member name="M:TGUI.ListBox.GetSelectedItemId">
            <summary>
            Gets the id of the selected item
            </summary>
            <returns>
            The id of the selected item, which was the optional id passed to the AddItem function.
            When no item was selected then this function returns an empty string.
            </returns>
        </member>
        <member name="M:TGUI.ListBox.GetSelectedItemIndex">
            <summary>
            Gets the index of the selected item
            </summary>
            <returns>The index of the selected item, or -1 when no item was selected</returns>
        </member>
        <member name="M:TGUI.ListBox.ChangeItem(System.String,System.String)">
            <summary>
            Changes an item with name originalValue to newValue
            </summary>
            <param name="originalValue">The name of the item which you want to change</param>
            <param name="newValue">The new name for that item</param>
            <returns>
            - true when the item was changed
            - false when none of the items had the given name
            </returns>
            <remarks>
            In case the names are not unique, only the first item with that name will be changed.
            </remarks>
        </member>
        <member name="M:TGUI.ListBox.ChangeItemById(System.String,System.String)">
            <summary>
            Changes the name of an item with the given id to newValue
            </summary>
            <param name="id">The unique id of the item which you want to change</param>
            <param name="newValue">The new name for that item</param>
            <returns>
            - true when the item was changed
            - false when none of the items had the given id
            </returns>
            <remarks>
            In case the id is not unique, only the first item with that id will be changed.
            </remarks>
        </member>
        <member name="M:TGUI.ListBox.ChangeItemByIndex(System.UInt32,System.String)">
            <summary>
            Changes the name of an item at the given index to newValue
            </summary>
            <param name="index">The index of the item which you want to change</param>
            <param name="newValue">The new name for that item</param>
            <returns>
            - true when the item was changed
            - false when the index was too high
            </returns>
        </member>
        <member name="M:TGUI.ListBox.GetItemCount">
            <summary>
            Returns the amount of items in the list box
            </summary>
            <returns>Number of items inside the list box</returns>
        </member>
        <member name="M:TGUI.ListBox.GetItems">
            <summary>
            Returns a copy of the items in the list box
            </summary>
            <returns>List of items</returns>
        </member>
        <member name="M:TGUI.ListBox.GetItemIds">
            <summary>
            Returns a copy of the item ids in the list box
            </summary>
            <returns>List of item ids.</returns>
            <remarks>
            Items that were not given an id simply have an empty string as id.
            </remarks>
        </member>
        <member name="P:TGUI.ListBox.ItemHeight">
            <summary>
            Gets or sets the height of the items in the list box
            </summary>
        </member>
        <member name="P:TGUI.ListBox.MaximumItems">
            <summary>
            Gets or sets the maximum items inside the list box. When the maximum is 0 then the limit is disabled.
            </summary>
        </member>
        <member name="P:TGUI.ListBox.AutoScroll">
            <summary>
            Gets or sets whether the list box scrolls to the bottom when a new item is added
            </summary>
            <remarks>
            Auto scrolling is enabled by default.
            </remarks>
        </member>
        <member name="P:TGUI.ListBox.ScrollbarValue">
            <summary>
            Gets or sets the thumb position of the scrollbar
            </summary>
        </member>
        <member name="M:TGUI.ListBox.Contains(System.String)">
            <summary>
            Returns whether the list box contains the given item
            </summary>
            <param name="item">The item to search for</param>
            <returns>Does the list box contain the item?</returns>
        </member>
        <member name="M:TGUI.ListBox.ContainsId(System.String)">
            <summary>
            Returns whether the list box contains an item with the given id
            </summary>
            <param name="id">The id of the item to search for</param>
            <returns>Does the list box contain the id?</returns>
        </member>
        <member name="M:TGUI.ListBox.InitSignals">
            <summary>
            Initializes the signals
            </summary>
        </member>
        <member name="E:TGUI.ListBox.ItemSelected">
            <summary>Event handler for the ItemSelected signal</summary>
        </member>
        <member name="E:TGUI.ListBox.MousePressed">
            <summary>Event handler for the MousePressed signal</summary>
        </member>
        <member name="E:TGUI.ListBox.MouseReleased">
            <summary>Event handler for the MouseReleased signal</summary>
        </member>
        <member name="E:TGUI.ListBox.DoubleClicked">
            <summary>Event handler for the DoubleClicked signal</summary>
        </member>
        <member name="T:TGUI.ListView">
            <summary>
            List view widget
            </summary>
        </member>
        <member name="M:TGUI.ListView.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.ListView.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.ListView.#ctor(TGUI.ListView)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.ListView.Renderer">
            <summary>
            Gets or sets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
            <remarks>
            After retrieving the renderer, the widget has its own copy of the renderer and it will no longer be shared.
            </remarks>
        </member>
        <member name="P:TGUI.ListView.SharedRenderer">
            <summary>
            Gets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
        </member>
        <member name="M:TGUI.ListView.AddColumn(System.String,System.Single,TGUI.HorizontalAlignment)">
            <summary>
            Adds a column
            </summary>
            <param name="text">The caption of the new column</param>
            <param name="width">Width of the column. Set width to 0 to make it depend on the width of the column caption.</param>
            <param name="columnAlignment">The text alignment for all texts in the column</param>
            <returns>Index of the item that was just added</returns>
        </member>
        <member name="M:TGUI.ListView.SetColumnText(System.UInt32,System.String)">
            <summary>
            Changes the text of a column
            </summary>
            <param name="index">Index of the column to change</param>
            <param name="text">Caption of the column</param>
        </member>
        <member name="M:TGUI.ListView.GetColumnText(System.UInt32)">
            <summary>
            Returns the text of a column
            </summary>
            <param name="index">Index of the column</param>
            <returns>Caption of the column</returns>
        </member>
        <member name="M:TGUI.ListView.SetColumnText(System.UInt32,System.Single)">
            <summary>
            Changes the width of a column
            </summary>
            <param name="index">Index of the column to change</param>
            <param name="width">Width of the column. Set width to 0 to make it depend on the width of the column caption.</param>
        </member>
        <member name="M:TGUI.ListView.GetColumnWidth(System.UInt32)">
            <summary>
            Returns the width of a column
            </summary>
            <param name="index">Index of the column</param>
            <returns>Width of the column</returns>
        </member>
        <member name="M:TGUI.ListView.SetColumnAlignment(System.UInt32,TGUI.HorizontalAlignment)">
            <summary>
            Changes the text alignment within a column
            </summary>
            <param name="index">Index of the column to change</param>
            <param name="columnAlignment">The text alignment for all texts in the column</param>
        </member>
        <member name="M:TGUI.ListView.GetColumnAlignment(System.UInt32)">
            <summary>
            Returns the current text alignment within a column
            </summary>
            <param name="index">Index of the column</param>
            <returns>Text alignment for all texts in the column</returns>
        </member>
        <member name="M:TGUI.ListView.RemoveAllColumns">
            <summary>
            Removes all columns
            </summary>
        </member>
        <member name="M:TGUI.ListView.GetColumnCount">
            <summary>
            Returns the amount of columns in the list view
            </summary>
            <returns>Number of columns</returns>
        </member>
        <member name="P:TGUI.ListView.HeaderHeight">
            <summary>
            Gets or sets the height of the header row
            </summary>
        </member>
        <member name="P:TGUI.ListView.CurrentHeaderHeight">
            <summary>
            Gets the total height of the header (HeaderHeight + HeaderSeparatorHeight) or 0 if no header row is shown
            </summary>
        </member>
        <member name="P:TGUI.ListView.HeaderVisible">
            <summary>
            Gets or sets whether the header is shown
            </summary>
        </member>
        <member name="M:TGUI.ListView.AddItem(System.String)">
            <summary>
            Adds an item to the list
            </summary>
            <param name="text">The caption of the item you want to add</param>
            <returns>Index of the item that was just added</returns>
        </member>
        <member name="M:TGUI.ListView.AddItem(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Adds an item with values for multiple columns to the list
            </summary>
            <param name="item">Texts for each column</param>
            <returns>Index of the item that was just added</returns>
        </member>
        <member name="M:TGUI.ListView.ChangeItem(System.UInt32,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Changes an item with values for multiple columns to the list
            </summary>
            <param name="index">Index of the item to update</param>
            <param name="item">Texts for each column</param>
            <returns>True when the item was updated, false when the index was too high</returns>
        </member>
        <member name="M:TGUI.ListView.ChangeSubItem(System.UInt32,System.UInt32,System.String)">
            <summary>
            Changes the caption of a single value in the item
            </summary>
            <param name="index">Index of the item to update</param>
            <param name="column">Index of the column to change</param>
            <param name="item">Texts for the given column for the given item</param>
            <returns>True when the item was updated, false when the index was too high</returns>
        </member>
        <member name="M:TGUI.ListView.RemoveItem(System.UInt32)">
            <summary>
            Removes the item from the list view
            </summary>
            <param name="index">Index of the item in the list view</param>
            <returns>True when the item was removed, false when the index was too high</returns>
        </member>
        <member name="M:TGUI.ListView.RemoveAllItems">
            <summary>
            Removes all items from the list
            </summary>
        </member>
        <member name="M:TGUI.ListView.SetSelectedItem(System.UInt32)">
            <summary>
            Selects an item in the list view
            </summary>
            <param name="index">Index of the item in the list view</param>
        </member>
        <member name="M:TGUI.ListView.SetSelectedItems(System.Collections.Generic.IReadOnlyList{System.UInt32})">
            <summary>
            Selects multiple items in the list view (if MultiSelect is true)
            </summary>
            <param name="indices">Indices of the items in the list view</param>
        </member>
        <member name="M:TGUI.ListView.GetSelectedItemIndex">
            <summary>
            Gets the index of the selected item
            </summary>
            <returns>The index of the selected item, or -1 when no item was selected</returns>
        </member>
        <member name="P:TGUI.ListView.MultiSelect">
            <summary>
            Gets or sets whether selection of multiple items is allowed
            </summary>
        </member>
        <member name="M:TGUI.ListView.DeselectItems">
            <summary>
            Deselects the selected item
            </summary>
        </member>
        <member name="M:TGUI.ListView.SetItemIcon(System.UInt32,SFML.Graphics.Texture)">
            <summary>
            Sets a small icon in front of the item
            </summary>
            <param name="index">Index of the item</param>
            <param name="icon">Texture of the item icon</param>
        </member>
        <member name="M:TGUI.ListView.GetItemCount">
            <summary>
            Returns the amount of items in the list view
            </summary>
            <returns>Number of items inside the list view</returns>
        </member>
        <member name="M:TGUI.ListView.GetItem(System.UInt32)">
            <summary>
            Retrieves an item in the list
            </summary>
            <param name="index">The index of the item</param>
            <returns>Text of the item or an empty string when the index was higher than the amount of items</returns>
        </member>
        <member name="M:TGUI.ListView.GetItemRow(System.UInt32)">
            <summary>
            Retrieves the values of all columns for an item in the list
            </summary>
            <param name="index">The index of the item</param>
            <returns>Texts of the item for each column or an list of empty strings when the index was too high</returns>
            <remarks>
            The returned list has the same length as the amount of columns.
            </remarks>
        </member>
        <member name="M:TGUI.ListView.GetItemCell(System.UInt32,System.UInt32)">
            <summary>
            Retrieves the value for a cell in the list
            </summary>
            <param name="rowIndex">The index of the row</param>
            <param name="columnIndex">The index of the column</param>
            <returns>Texts of the cell or an empty string when the index is out of range</returns>
        </member>
        <member name="M:TGUI.ListView.GetItems">
            <summary>
            Returns a list of the texts in the first column for all items in the list view
            </summary>
            <returns>Texts of the first column of items</returns>
        </member>
        <member name="M:TGUI.ListView.Sort(System.UInt32,System.Func{System.String,System.String,System.Boolean})">
            <summary>
            Removes the item from the list view
            </summary>
            <param name="index">Index of the column to sort on</param>
            <param name="comp">Comparison function that returns true if the first string belongs before the second one</param>
        </member>
        <member name="P:TGUI.ListView.ItemHeight">
            <summary>
            Gets or sets the height of the items in the list view
            </summary>
        </member>
        <member name="P:TGUI.ListView.HeaderTextSize">
            <summary>
            Gets or sets the character size of the header captions
            </summary>
            <remarks>
            By default, header text size is the same as the text size of the items.
            </remarks>
        </member>
        <member name="P:TGUI.ListView.SeparatorWidth">
            <summary>
            Gets or sets the width of the column separator
            </summary>
        </member>
        <member name="P:TGUI.ListView.HeaderSeparatorHeight">
            <summary>
            Gets or sets the height of the separator between the header and the items
            </summary>
        </member>
        <member name="P:TGUI.ListView.GridLinesWidth">
            <summary>
            Gets or sets the width of the grid lines
            </summary>
        </member>
        <member name="P:TGUI.ListView.AutoScroll">
            <summary>
            Gets or sets whether the list view scrolls to the bottom when a new item is added
            </summary>
            <remarks>
            Auto scrolling is enabled by default.
            </remarks>
        </member>
        <member name="P:TGUI.ListView.ShowVerticalGridLines">
            <summary>
            Gets or sets whether lines are drawn between items
            </summary>
        </member>
        <member name="P:TGUI.ListView.ShowHorizontalGridLines">
            <summary>
            Gets or sets whether lines are drawn between items
            </summary>
        </member>
        <member name="P:TGUI.ListView.ExpandLastColumn">
            <summary>
            Gets or sets whether the last column is expanded to fill the list view (if all columns fit inside the list view)
            </summary>
        </member>
        <member name="P:TGUI.ListView.VerticalScrollbarPolicy">
            <summary>
            Gets or sets when the vertical scrollbar should be displayed
            </summary>
        </member>
        <member name="P:TGUI.ListView.HorizontalScrollbarPolicy">
            <summary>
            Gets or sets when the horizontal scrollbar should be displayed
            </summary>
        </member>
        <member name="P:TGUI.ListView.VerticalScrollbarValue">
            <summary>
            Gets or sets the thumb position of the vertical scrollbar
            </summary>
        </member>
        <member name="P:TGUI.ListView.HorizontalScrollbarValue">
            <summary>
            Gets or sets the thumb position of the horizontal scrollbar
            </summary>
        </member>
        <member name="M:TGUI.ListView.InitSignals">
            <summary>
            Initializes the signals
            </summary>
        </member>
        <member name="E:TGUI.ListView.ItemSelected">
            <summary>Event handler for the ItemSelected signal</summary>
        </member>
        <member name="E:TGUI.ListView.DoubleClicked">
            <summary>Event handler for the DoubleClicked signal</summary>
        </member>
        <member name="E:TGUI.ListView.RightClicked">
            <summary>Event handler for the RightClicked signal</summary>
        </member>
        <member name="E:TGUI.ListView.HeaderClicked">
            <summary>Event handler for the HeaderClicked signal</summary>
        </member>
        <member name="T:TGUI.MenuBar">
            <summary>
            Menu bar widget
            </summary>
        </member>
        <member name="M:TGUI.MenuBar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.MenuBar.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.MenuBar.#ctor(TGUI.MenuBar)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.MenuBar.Renderer">
            <summary>
            Gets or sets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
            <remarks>
            After retrieving the renderer, the widget has its own copy of the renderer and it will no longer be shared.
            </remarks>
        </member>
        <member name="P:TGUI.MenuBar.SharedRenderer">
            <summary>
            Gets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
        </member>
        <member name="M:TGUI.MenuBar.AddMenu(System.String)">
            <summary>
            Adds a new menu
            </summary>
            <param name="text">The text written on the menu</param>
        </member>
        <member name="M:TGUI.MenuBar.AddMenuItem(System.String)">
            <summary>
            Adds a new menu item to the last added menu
            </summary>
            <param name="text">The text written on this menu item</param>
            <returns>
            True when the item was added, false when the menu bar doesn't contain any menus yet
            </returns>
            <example>
            <code>
            menuBar.AddMenu("File");
            menuBar.AddMenuItem("Load");
            menuBar.AddMenuItem("Save");
            menuBar.AddMenu("Edit");
            menuBar.AddMenuItem("Undo");
            </code>
            </example>
        </member>
        <member name="M:TGUI.MenuBar.AddMenuItem(System.String,System.String)">
            <summary>
            Adds a new menu item to an existing menu
            </summary>
            <param name="menu">The name of the menu to which the menu item will be added</param>
            <param name="text">The text written on this menu item</param>
            <returns>
            True when the item was added, false when menu was not found
            </returns>
            <example>
            <code>
            menuBar.AddMenu("File");
            menuBar.AddMenu("Edit");
            menuBar.AddMenuItem("File", "Load");
            menuBar.AddMenuItem("File", "Save");
            menuBar.AddMenuItem("Edit", "Undo");
            </code>
            </example>
        </member>
        <member name="M:TGUI.MenuBar.AddMenuItem(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)">
            <summary>
            Adds a new menu item (or sub menu item)
            </summary>
            <param name="hierarchy">Hierarchy of the menu items, starting with the menu and ending with menu item to be added</param>
            <param name="createParents">Should the hierarchy be created if it did not exist yet?</param>
            <returns>
            True when the item was added, false when createParents was false and the parents hierarchy does not exist
            or if hierarchy does not contain at least 2 elements.
            </returns>
            <example>
            <code>
            menuBar.AddMenuItem(new List&lt;string&gt;{"File", "Save"});
            menuBar.AddMenuItem(new List&lt;string&gt;{"View", "Messages", "Tags", "Important"});
            </code>
            </example>
        </member>
        <member name="M:TGUI.MenuBar.RemoveAllMenus">
            <summary>
            Removes all menus
            </summary>
        </member>
        <member name="M:TGUI.MenuBar.RemoveMenu(System.String)">
            <summary>
            Removes a menu
            </summary>
            <param name="menu">The name of the menu to remove</param>
            <returns>
            True when the menu was removed, false when menu was not found
            </returns>
        </member>
        <member name="M:TGUI.MenuBar.RemoveMenuItem(System.String,System.String)">
            <summary>
            Removes a menu item
            </summary>
            <param name="menu">The name of the menu in which the menu item is located</param>
            <param name="menuItem">The name of the menu item to remove</param>
            <returns>
            True when the item was removed, false when menu or menuItem was not found
            </returns>
        </member>
        <member name="M:TGUI.MenuBar.RemoveMenuItem(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)">
            <summary>
            Removes a menu item (or sub menu item)
            </summary>
            <param name="hierarchy">Hierarchy of the menu item, starting with the menu and ending with menu item to be deleted</param>
            <param name="removeParentsWhenEmpty">Also delete the parent of the deleted menu item if it has no other children</param>
            <returns>
            True when the menu item exists, false when hierarchy was incorrect
            </returns>
            <example>
            <code>
            menuBar.RemoveMenuItem(new List&lt;string&gt;{"File", "Save"});
            menuBar.RemoveMenuItem(new List&lt;string&gt;{"View", "Messages", "Tags", "Important"});
            </code>
            </example>
        </member>
        <member name="M:TGUI.MenuBar.SetMenuEnabled(System.String,System.Boolean)">
            <summary>
            Enable or disable an entire menu
            </summary>
            <param name="menu">The name of the menu to enable or disable</param>
            <param name="enabled">Should the menu be enabled or disabled?</param>
            <returns>
            True when the menu exists, false when menu was not found
            </returns>
        </member>
        <member name="M:TGUI.MenuBar.GetMenuEnabled(System.String)">
            <summary>
            Check if an entire menu is enabled or disabled
            </summary>
            <param name="menu">The name of the menu to check</param>
            <returns>
            True if the menu is enabled, false if it was disabled or when the menu did not exist
            </returns>
        </member>
        <member name="M:TGUI.MenuBar.SetMenuItemEnabled(System.String,System.String,System.Boolean)">
            <summary>
            Enable or disable a menu item
            </summary>
            <param name="menu">The name of the menu in which the menu item is located</param>
            <param name="menuItem">The name of the menu item to enable or disable</param>
            <param name="enabled">Should the menu item be enabled or disabled?</param>
            <returns>
            True when the menu item exists, false when menu or menuItem was not found
            </returns>
        </member>
        <member name="M:TGUI.MenuBar.GetMenuItemEnabled(System.String,System.String)">
            <summary>
            Check if a menu item is enabled or disabled
            </summary>
            <param name="menu">The name of the menu in which the menu item is located</param>
            <param name="menuItem">The name of the menu item to check</param>
            <returns>
            True if the menu item is enabled, false if it was disabled or when the menu or menuItem did not exist
            </returns>
        </member>
        <member name="M:TGUI.MenuBar.SetMenuItemEnabled(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)">
            <summary>
            Enable or disable a menu item
            </summary>
            <param name="hierarchy">Hierarchy of menu items, starting with the menu and ending with the menu item to enable/disable</param>
            <param name="enabled">Should the menu item be enabled or disabled?</param>
            <returns>
            True when the menu item exists, false when hierarchy was incorrect
            </returns>
        </member>
        <member name="M:TGUI.MenuBar.GetMenuItemEnabled(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Check if a menu item is enabled or disabled
            </summary>
            <param name="hierarchy">Hierarchy of menu items, starting with the menu and ending with the menu item to check</param>
            <returns>
            True if the menu item is enabled, false if it was disabled or when the hierarchy was incorrect
            </returns>
        </member>
        <member name="P:TGUI.MenuBar.MinimumSubMenuWidth">
            <summary>
            Gets or sets the minimum width of the submenus
            </summary>
            <remarks>
            When a submenu is displayed, the width will be either this or the width of the longest text in the submenu.
            The default minimum width is 125 pixels.
            </remarks>
        </member>
        <member name="P:TGUI.MenuBar.InvertedMenuDirection">
            <summary>
            Gets or sets whether the menus open above or below the menu bar
            </summary>
        </member>
        <member name="M:TGUI.MenuBar.CloseMenu">
            <summary>
            Closes the open menu when one of the menus is open
            </summary>
        </member>
        <member name="M:TGUI.MenuBar.InitSignals">
            <summary>
            Initializes the signals
            </summary>
        </member>
        <member name="E:TGUI.MenuBar.MenuItemClicked">
            <summary>Event handler for the ItemSelected signal</summary>
        </member>
        <member name="E:TGUI.MessageBox.ButtonPressed">
            <summary>Event handler for the ButtonPressed signal</summary>
        </member>
        <member name="T:TGUI.Panel">
            <summary>
            Panel widget
            </summary>
        </member>
        <member name="M:TGUI.Panel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.Panel.#ctor(SFML.System.Vector2f)">
            <summary>
            Constructor to create the panel with a given size
            </summary>
            <param name="size">Initial size of the panel</param>
        </member>
        <member name="M:TGUI.Panel.#ctor(System.Single,System.Single)">
            <summary>
            Constructor to create the panel with a given size
            </summary>
            <param name="width">Initial width of the panel</param>
            <param name="height">Initial height of the panel</param>
        </member>
        <member name="M:TGUI.Panel.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.Panel.#ctor(TGUI.Panel)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.Panel.Renderer">
            <summary>
            Gets or sets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
            <remarks>
            After retrieving the renderer, the widget has its own copy of the renderer and it will no longer be shared.
            </remarks>
        </member>
        <member name="P:TGUI.Panel.SharedRenderer">
            <summary>
            Gets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
        </member>
        <member name="M:TGUI.Panel.InitSignals">
            <summary>
            Initializes the signals
            </summary>
        </member>
        <member name="E:TGUI.Panel.MousePressed">
            <summary>Event handler for the MousePressed signal</summary>
        </member>
        <member name="E:TGUI.Panel.MouseReleased">
            <summary>Event handler for the MouseReleased signal</summary>
        </member>
        <member name="E:TGUI.Panel.Clicked">
            <summary>Event handler for the Clicked signal</summary>
        </member>
        <member name="E:TGUI.Panel.RightMousePressed">
            <summary>Event handler for the RightMousePressed signal</summary>
        </member>
        <member name="E:TGUI.Panel.RightMouseReleased">
            <summary>Event handler for the RightMouseReleased signal</summary>
        </member>
        <member name="E:TGUI.Panel.RightClicked">
            <summary>Event handler for the RightClicked signal</summary>
        </member>
        <member name="T:TGUI.Picture">
            <summary>
            Picture widget
            </summary>
        </member>
        <member name="M:TGUI.Picture.#ctor(System.String)">
            <summary>
            Constructor to create the picture with a texture loaded from a file
            </summary>
            <param name="filename">Filename of the texture to load</param>
        </member>
        <member name="M:TGUI.Picture.#ctor(SFML.Graphics.Texture)">
            <summary>
            Constructor to create the picture with a given texture
            </summary>
            <param name="texture">Texture used by the widget</param>
        </member>
        <member name="M:TGUI.Picture.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.Picture.#ctor(TGUI.Picture)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.Picture.Renderer">
            <summary>
            Gets or sets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
            <remarks>
            After retrieving the renderer, the widget has its own copy of the renderer and it will no longer be shared.
            </remarks>
        </member>
        <member name="P:TGUI.Picture.SharedRenderer">
            <summary>
            Gets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
        </member>
        <member name="P:TGUI.Picture.IgnoreMouseEvents">
            <summary>
            Gets or sets whether the widget should completely ignore mouse events and let them pass to the widgets behind it.
            </summary>
        </member>
        <member name="M:TGUI.Picture.InitSignals">
            <summary>
            Initializes the signals
            </summary>
        </member>
        <member name="E:TGUI.Picture.DoubleClicked">
            <summary>Event handler for the DoubleClicked signal</summary>
        </member>
        <member name="E:TGUI.ProgressBar.ValueChanged">
            <summary>Event handler for the ValueChanged signal</summary>
        </member>
        <member name="E:TGUI.ProgressBar.Full">
            <summary>Event handler for the Full signal</summary>
        </member>
        <member name="T:TGUI.RadioButton">
            <summary>
            Radio button widget
            </summary>
        </member>
        <member name="M:TGUI.RadioButton.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="text">The text to display next to the radio button</param>
        </member>
        <member name="M:TGUI.RadioButton.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.RadioButton.#ctor(TGUI.RadioButton)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.RadioButton.Renderer">
            <summary>
            Gets or sets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
            <remarks>
            After retrieving the renderer, the widget has its own copy of the renderer and it will no longer be shared.
            </remarks>
        </member>
        <member name="P:TGUI.RadioButton.SharedRenderer">
            <summary>
            Gets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
        </member>
        <member name="P:TGUI.RadioButton.Checked">
            <summary>
            Gets or sets whether the radio button is checked
            </summary>
            <remarks>
            When checking a radio button, all other radio buttons that have the same parent will be unchecked.
            </remarks>
        </member>
        <member name="P:TGUI.RadioButton.Text">
            <summary>
            Gets or sets the text to display next to the radio button
            </summary>
        </member>
        <member name="P:TGUI.RadioButton.TextClickable">
            <summary>
            Gets or sets whether the radio button is be checked by clicking on the text next to it
            </summary>
        </member>
        <member name="M:TGUI.RadioButton.InitSignals">
            <summary>
            Initializes the signals
            </summary>
        </member>
        <member name="E:TGUI.RadioButton.Toggled">
            <summary>Event handler for the Checked/Unchecked signal</summary>
        </member>
        <member name="T:TGUI.RadioButtonGroup">
            <summary>
            Horizontal wrap widget
            </summary>
        </member>
        <member name="M:TGUI.RadioButtonGroup.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.RadioButtonGroup.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.RadioButtonGroup.#ctor(TGUI.RadioButtonGroup)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="E:TGUI.RangeSlider.RangeChanged">
            <summary>Event handler for the RangeChanged signal</summary>
        </member>
        <member name="T:TGUI.ScrollablePanel">
            <summary>
            Scrollable panel widget
            </summary>
        </member>
        <member name="M:TGUI.ScrollablePanel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.ScrollablePanel.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.ScrollablePanel.#ctor(TGUI.ScrollablePanel)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.ScrollablePanel.Renderer">
            <summary>
            Gets or sets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
            <remarks>
            After retrieving the renderer, the widget has its own copy of the renderer and it will no longer be shared.
            </remarks>
        </member>
        <member name="P:TGUI.ScrollablePanel.SharedRenderer">
            <summary>
            Gets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
        </member>
        <member name="P:TGUI.ScrollablePanel.ContentSize">
             <summary>
             Gets or sets the size available for child widgets
             </summary>
             <remarks>
             If the content size is larger than the size of the panel then scrollbars will be displayed.
            
             When the content size is (0,0), which is the default, then the content size is determined by the child widgets.
             </remarks>
        </member>
        <member name="P:TGUI.ScrollablePanel.ScrollbarWidth">
            <summary>
            Gets or sets the width of the scrollbars
            </summary>
        </member>
        <member name="P:TGUI.ScrollablePanel.VerticalScrollbarPolicy">
            <summary>
            Gets or sets when the vertical scrollbar should be displayed
            </summary>
        </member>
        <member name="P:TGUI.ScrollablePanel.HorizontalScrollbarPolicy">
            <summary>
            Gets or sets when the horizontal scrollbar should be displayed
            </summary>
        </member>
        <member name="P:TGUI.ScrollablePanel.VerticalScrollAmount">
            <summary>
            Gets or sets how much the value changes when scrolling or pressing one of the arrows of the vertical scrollbar
            </summary>
        </member>
        <member name="P:TGUI.ScrollablePanel.HorizontalScrollAmount">
            <summary>
            Gets or sets how much the value changes when scrolling or pressing one of the arrows of the horizontal scrollbar
            </summary>
        </member>
        <member name="P:TGUI.ScrollablePanel.VerticalScrollbarValue">
            <summary>
            Gets or sets the thumb position of the vertical scrollbar
            </summary>
        </member>
        <member name="P:TGUI.ScrollablePanel.HorizontalScrollbarValue">
            <summary>
            Gets or sets the thumb position of the horizontal scrollbar
            </summary>
        </member>
        <member name="P:TGUI.ScrollablePanel.ContentOffset">
            <summary>
            Gets the amount of pixels the child widgets have been shifted to be displayed by the scrollable panel (i.e. the value of the scrollbars)
            </summary>
        </member>
        <member name="T:TGUI.Scrollbar">
            <summary>
            Scrollbar widget
            </summary>
        </member>
        <member name="T:TGUI.Scrollbar.Policy">
            <summary>
            Defines when the scrollbar shows up
            </summary>
        </member>
        <member name="F:TGUI.Scrollbar.Policy.Automatic">
            <summary>Show the scrollbar only when needed (default)</summary>
        </member>
        <member name="F:TGUI.Scrollbar.Policy.Always">
            <summary>Always show the scrollbar, even when the contents fits</summary>
        </member>
        <member name="F:TGUI.Scrollbar.Policy.Never">
            <summary>Never show the scrollbar, even if the contents does not fit</summary>
        </member>
        <member name="M:TGUI.Scrollbar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.Scrollbar.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.Scrollbar.#ctor(TGUI.Scrollbar)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.Scrollbar.Renderer">
            <summary>
            Gets or sets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
            <remarks>
            After retrieving the renderer, the widget has its own copy of the renderer and it will no longer be shared.
            </remarks>
        </member>
        <member name="P:TGUI.Scrollbar.SharedRenderer">
            <summary>
            Gets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
        </member>
        <member name="P:TGUI.Scrollbar.ViewportSize">
             <summary>
             Gets or sets the viewport size
             </summary>
             <remarks>
             If the contents through which the scrollbar can scroll is 600 pixels of which only 200 pixels are visible on the
             screen then the viewport size should be set to 200 and the maximum should be set to 600. The thumb will occupy
             one third of the scrollbar track in this case. The possible scrollbar values are in the range [0, 400] in this case.
            
             Until the maximum is bigger than this value, no scrollbar will be drawn.
             You can however choose to always draw the scrollbar by setting AutoHide to false.
             </remarks>
        </member>
        <member name="P:TGUI.Scrollbar.Maximum">
            <summary>
            Gets or sets the maximum value
            </summary>
            <remarks>
            When the value is bigger than Maximum - ViewportSize then the value is set to Maximum - ViewportSize.
            The default maximum value is 10.
            </remarks>
        </member>
        <member name="P:TGUI.Scrollbar.Value">
            <summary>
            Gets or sets the value of the scrollbar
            </summary>
            <remarks>
            The value has to be smaller than Maximum - ViewportSize.
            </remarks>
        </member>
        <member name="P:TGUI.Scrollbar.ScrollAmount">
            <summary>
            Gets or sets how much the value changes when scrolling or pressing one of the arrows of the scrollbar
            </summary>
        </member>
        <member name="P:TGUI.Scrollbar.AutoHide">
            <summary>
            Gets or sets whether the scrollbar should hide automatically or not
            </summary>
            <remarks>
            When true (default), the scrollbar will not be drawn when the maximum is smaller than the viewportSize.
            </remarks>
        </member>
        <member name="P:TGUI.Scrollbar.VerticalScroll">
            <summary>
            Gets or sets whether the scrollbar lies horizontally or vertically
            </summary>
            <remarks>
            This function will swap the width and height of the scrollbar if it didn't lie in the wanted direction.
            </remarks>
        </member>
        <member name="P:TGUI.Scrollbar.DefaultWidth">
            <summary>
            Gets the default width of the scrollbar
            </summary>
            <remarks>
            The default width is the value the scrollbar has on construction or the size of the texture once a texture is set.
            </remarks>
        </member>
        <member name="M:TGUI.Scrollbar.InitSignals">
            <summary>
            Initializes the signals
            </summary>
        </member>
        <member name="E:TGUI.Scrollbar.ValueChanged">
            <summary>Event handler for the ValueChanged signal</summary>
        </member>
        <member name="T:TGUI.Slider">
            <summary>
            Slider widget
            </summary>
        </member>
        <member name="M:TGUI.Slider.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.Slider.#ctor(System.Single,System.Single)">
            <summary>
            Constructor that sets the minimum and maximum properties
            </summary>
            <param name="min">Minimum slider value</param>
            <param name="max">Maximum slider value</param>
        </member>
        <member name="M:TGUI.Slider.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.Slider.#ctor(TGUI.Slider)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.Slider.Renderer">
            <summary>
            Gets or sets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
            <remarks>
            After retrieving the renderer, the widget has its own copy of the renderer and it will no longer be shared.
            </remarks>
        </member>
        <member name="P:TGUI.Slider.SharedRenderer">
            <summary>
            Gets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
        </member>
        <member name="P:TGUI.Slider.Minimum">
            <summary>
            Gets or sets the minimum value of the slider
            </summary>
        </member>
        <member name="P:TGUI.Slider.Maximum">
            <summary>
            Gets or sets the maximum value of the slider
            </summary>
        </member>
        <member name="P:TGUI.Slider.Value">
            <summary>
            Gets or sets the current value of the slider
            </summary>
        </member>
        <member name="P:TGUI.Slider.Step">
            <summary>
            Gets or sets the number of positions the thumb advances with each move
            </summary>
        </member>
        <member name="P:TGUI.Slider.VerticalScroll">
            <summary>
            Gets or sets whether the scrollbar lies horizontally or vertically
            </summary>
            <remarks>
            This function will swap the width and height of the scrollbar if it didn't lie in the wanted direction.
            </remarks>
        </member>
        <member name="P:TGUI.Slider.InvertedDirection">
            <summary>
            Gets or sets whether the sides of the slider that represents the minimum and maximum are inverted
            </summary>
        </member>
        <member name="P:TGUI.Slider.ChangeValueOnScroll">
            <summary>
            Gets or sets whether the mouse wheel can be used to change the value of the slider
            </summary>
        </member>
        <member name="M:TGUI.Slider.InitSignals">
            <summary>
            Initializes the signals
            </summary>
        </member>
        <member name="E:TGUI.Slider.ValueChanged">
            <summary>Event handler for the ValueChanged signal</summary>
        </member>
        <member name="T:TGUI.SpinButton">
            <summary>
            Spin button widget
            </summary>
        </member>
        <member name="M:TGUI.SpinButton.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.SpinButton.#ctor(System.Single,System.Single)">
            <summary>
            Constructor that sets the minimum and maximum properties
            </summary>
            <param name="min">Minimum spin button value</param>
            <param name="max">Maximum spin button value</param>
        </member>
        <member name="M:TGUI.SpinButton.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.SpinButton.#ctor(TGUI.SpinButton)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.SpinButton.Renderer">
            <summary>
            Gets or sets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
            <remarks>
            After retrieving the renderer, the widget has its own copy of the renderer and it will no longer be shared.
            </remarks>
        </member>
        <member name="P:TGUI.SpinButton.SharedRenderer">
            <summary>
            Gets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
        </member>
        <member name="P:TGUI.SpinButton.Minimum">
            <summary>
            Gets or sets the minimum value of the spin button
            </summary>
        </member>
        <member name="P:TGUI.SpinButton.Maximum">
            <summary>
            Gets or sets the maximum value of the spin button
            </summary>
        </member>
        <member name="P:TGUI.SpinButton.Value">
            <summary>
            Gets or sets the current value of the spin button
            </summary>
        </member>
        <member name="P:TGUI.SpinButton.Step">
            <summary>
            Gets or sets the amount the value changes when clicking on the spin button
            </summary>
        </member>
        <member name="P:TGUI.SpinButton.VerticalScroll">
            <summary>
            Gets or sets whether the spin button lies horizontally or vertically
            </summary>
            <remarks>
            This function will swap the width and height of the scrollbar if it didn't lie in the wanted direction.
            </remarks>
        </member>
        <member name="M:TGUI.SpinButton.InitSignals">
            <summary>
            Initializes the signals
            </summary>
        </member>
        <member name="E:TGUI.SpinButton.ValueChanged">
            <summary>Event handler for the ValueChanged signal</summary>
        </member>
        <member name="E:TGUI.Tabs.TabSelected">
            <summary>Event handler for the TabSelected signal</summary>
        </member>
        <member name="T:TGUI.TextBox">
            <summary>
            Text box widget
            </summary>
        </member>
        <member name="M:TGUI.TextBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.TextBox.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.TextBox.#ctor(TGUI.TextBox)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.TextBox.Renderer">
            <summary>
            Gets or sets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
            <remarks>
            After retrieving the renderer, the widget has its own copy of the renderer and it will no longer be shared.
            </remarks>
        </member>
        <member name="P:TGUI.TextBox.SharedRenderer">
            <summary>
            Gets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
        </member>
        <member name="P:TGUI.TextBox.Text">
            <summary>
            Gets or sets the text of the text box
            </summary>
        </member>
        <member name="P:TGUI.TextBox.DefaultText">
            <summary>
            Gets or sets the default text of the text box. This is the text drawn when the text box is empty.
            </summary>
        </member>
        <member name="M:TGUI.TextBox.AddText(System.String)">
            <summary>
            Appends some text to the text that was already in the text box
            </summary>
            <param name="text">Text to add</param>
        </member>
        <member name="M:TGUI.TextBox.SetSelectedText(System.UInt32,System.UInt32)">
            <summary>
            Sets which part of the text is selected
            </summary>
            <param name="selectionStartIndex">Amount of characters before the start of the selection</param>
            <param name="selectionEndIndex">Amount of characters before the end of the selection</param>
        </member>
        <member name="P:TGUI.TextBox.SelectedText">
            <summary>
            Gets the currently selected text
            </summary>
        </member>
        <member name="P:TGUI.TextBox.SelectionStart">
            <summary>
            Gets the amount of characters before the start of the selected text
            </summary>
            <remarks>
            The start of the selection may be behind the end of the selection when the user selected the text from
            right to left or from bottom to top.
            </remarks>
        </member>
        <member name="P:TGUI.TextBox.SelectionEnd">
            <summary>
            Gets the amount of characters before the end of the selected text
            </summary>
            <remarks>
            The start of the selection may be behind the end of the selection when the user selected the text from
            right to left or from bottom to top.
            </remarks>
        </member>
        <member name="P:TGUI.TextBox.MaximumCharacters">
            <summary>
            Gets or sets the character limit (0 to disable, default)
            </summary>
        </member>
        <member name="P:TGUI.TextBox.CaretPosition">
            <summary>
            Gets or sets after which character the blinking cursor is located
            </summary>
        </member>
        <member name="P:TGUI.TextBox.ReadOnly">
            <summary>
            Gets or sets whether the text box is read-only
            </summary>
            <remarks>
            When the text box is read-only, you can no longer delete characters and type text.
            Selecting text, copying text and even calling the setText function will still work.
            </remarks>
        </member>
        <member name="P:TGUI.TextBox.VerticalScrollbarPresent">
            <summary>
            Gets or sets whether the vertical scrollbar should be displayed when the text does not fit in the text box
            </summary>
        </member>
        <member name="P:TGUI.TextBox.VerticalScrollbarPolicy">
            <summary>
            Gets or sets when the vertical scrollbar should be displayed
            </summary>
        </member>
        <member name="P:TGUI.TextBox.HorizontalScrollbarPolicy">
            <summary>
            Gets or sets when the horizontal scrollbar should be displayed
            </summary>
        </member>
        <member name="P:TGUI.TextBox.VerticalScrollbarValue">
            <summary>
            Gets or sets the thumb position of the vertical scrollbar
            </summary>
        </member>
        <member name="P:TGUI.TextBox.HorizontalScrollbarValue">
            <summary>
            Gets or sets the thumb position of the horizontal scrollbar
            </summary>
        </member>
        <member name="P:TGUI.TextBox.LinesCount">
            <summary>
            Gets the amount of lines that the text occupies in the TextBox
            </summary>
            <remarks>
            Note that this is the amount of lines after word-wrap is applied.
            </remarks>
        </member>
        <member name="M:TGUI.TextBox.InitSignals">
            <summary>
            Initializes the signals
            </summary>
        </member>
        <member name="E:TGUI.TextBox.TextChanged">
            <summary>Event handler for the TextChanged signal</summary>
        </member>
        <member name="E:TGUI.TextBox.SelectionChanged">
            <summary>Event handler for the SelectionChanged signal</summary>
        </member>
        <member name="T:TGUI.TreeView">
            <summary>
            Tree view widget
            </summary>
        </member>
        <member name="M:TGUI.TreeView.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.TreeView.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.TreeView.#ctor(TGUI.TreeView)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
        <member name="P:TGUI.TreeView.Renderer">
            <summary>
            Gets or sets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
            <remarks>
            After retrieving the renderer, the widget has its own copy of the renderer and it will no longer be shared.
            </remarks>
        </member>
        <member name="P:TGUI.TreeView.SharedRenderer">
            <summary>
            Gets the renderer, which gives access to properties that determine how the widget is displayed
            </summary>
        </member>
        <member name="M:TGUI.TreeView.AddItem(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)">
            <summary>
            Adds a new item to the tree view
            </summary>
            <param name="hierarchy">Hierarchy of items, with the last item being the leaf item</param>
            <param name="createParents">Should the hierarchy be created if it did not exist yet?</param>
            <returns>
            True when the item was added (always the case if createParents is true)
            </returns>
            <example>
            <code>
            treeView.AddItem(new List&lt;string&gt;{"Parent_1", "Child_1"});
            treeView.AddItem(new List&lt;string&gt;{"Parent_2", "Child_2", "Grandchild"});
            </code>
            </example>
        </member>
        <member name="M:TGUI.TreeView.Expand(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Expands the given item
            </summary>
            <param name="hierarchy">Hierarchy of items, identifying the node that has to be expanded</param>
        </member>
        <member name="M:TGUI.TreeView.ExpandAll">
            <summary>
            Expands all items
            </summary>
        </member>
        <member name="M:TGUI.TreeView.Collapse(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Collapses the given item
            </summary>
            <param name="hierarchy">Hierarchy of items, identifying the node that has to be collapsed</param>
        </member>
        <member name="M:TGUI.TreeView.CollapseAll">
            <summary>
            Collapse all items
            </summary>
        </member>
        <member name="M:TGUI.TreeView.SelectItem(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Selects an item in the tree view
            </summary>
            <param name="hierarchy">Hierarchy of items, identifying the node to be selected</param>
            <returns>
            True when the item was selected, false when hierarchy was incorrect
            </returns>
            <example>
            <code>
            treeView.SelectItem(new List&lt;string&gt;{"Parent_1", "Child_1"});
            </code>
            </example>
        </member>
        <member name="M:TGUI.TreeView.RemoveItem(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)">
            <summary>
            Removes an item
            </summary>
            <param name="hierarchy">Hierarchy of items, identifying the node to be removed</param>
            <param name="removeParentsWhenEmpty">Also delete the parent of the deleted item if it has no other children</param>
            <returns>
            True when the item existed and was removed, false when hierarchy was incorrect
            </returns>
            <example>
            <code>
            treeView.RemoveItem(new List&lt;string&gt;{"Parent_1", "Child_1"});
            treeView.RemoveItem(new List&lt;string&gt;{"Parent_2", "Child_2", "Grandchild"});
            </code>
            </example>
        </member>
        <member name="M:TGUI.TreeView.RemoveAllItems">
            <summary>
            Removes all items
            </summary>
        </member>
        <member name="M:TGUI.TreeView.DeselectItem">
            <summary>
            Deselect the item if one was selected
            </summary>
        </member>
        <member name="P:TGUI.TreeView.ItemHeight">
            <summary>
            Gets or sets the item height
            </summary>
        </member>
        <member name="P:TGUI.TreeView.VerticalScrollbarValue">
            <summary>
            Gets or sets the thumb position of the vertical scrollbar
            </summary>
        </member>
        <member name="P:TGUI.TreeView.HorizontalScrollbarValue">
            <summary>
            Gets or sets the thumb position of the horizontal scrollbar
            </summary>
        </member>
        <member name="M:TGUI.TreeView.InitSignals">
            <summary>
            Initializes the signals
            </summary>
        </member>
        <member name="E:TGUI.TreeView.ItemSelected">
            <summary>Event handler for the ItemSelected signal</summary>
        </member>
        <member name="E:TGUI.TreeView.DoubleClicked">
            <summary>Event handler for the DoubleClicked signal</summary>
        </member>
        <member name="E:TGUI.TreeView.Expanded">
            <summary>Event handler for the Expanded signal</summary>
        </member>
        <member name="E:TGUI.TreeView.Collapsed">
            <summary>Event handler for the Collapsed signal</summary>
        </member>
        <member name="E:TGUI.TreeView.RightClicked">
            <summary>Event handler for the RightClicked signal</summary>
        </member>
        <member name="T:TGUI.VerticalLayout">
            <summary>
            Vertical layout widget
            </summary>
        </member>
        <member name="M:TGUI.VerticalLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TGUI.VerticalLayout.#ctor(System.IntPtr)">
            <summary>
            Constructor that creates the object from its C pointer
            </summary>
            <param name="cPointer">Pointer to object in C code</param>
        </member>
        <member name="M:TGUI.VerticalLayout.#ctor(TGUI.VerticalLayout)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">Object to copy</param>
        </member>
    </members>
</doc>
